{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css.map","path":"css/style.css.map","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/bilibili.ico","path":"images/bilibili.ico","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/coolapk_logo.png","path":"images/coolapk_logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"884c10ea28f839a8a0f412825b3ccb8325e1d3de","modified":1675315561468},{"_id":"source/links/index.html","hash":"fa82c249cc0be43f31100cea257f5fe7dde4ed81","modified":1675323234473},{"_id":"source/_posts/面经笔记.md","hash":"08a1de6d919d45e4eba897dde216cacf3b0d902f","modified":1675147929101},{"_id":"themes/anatole/.gitignore","hash":"9fcbb05b158b5d3ba1ee60d38889e05e8b0f3f2a","modified":1675132189441},{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1675132189441},{"_id":"themes/anatole/package.json","hash":"c200aa0a17f2c9ca222d5ca501106c5fe6f8a161","modified":1675132189445},{"_id":"themes/anatole/_config.sample.yml","hash":"c557d352c738c0ce1d445d97df0097908d54e398","modified":1675138355126},{"_id":"themes/anatole/_config.yml","hash":"fff7dbc574a50c69b7ea20297678276db6fe38c8","modified":1675151837286},{"_id":"themes/anatole/languages/pt-BR.yml","hash":"ac5a0003d7793aade51f70643b2e2a631b6a65c3","modified":1675132189445},{"_id":"themes/anatole/languages/es-ES.yml","hash":"592489056d8df6fc5b5dfa75683aa5b2611d9c14","modified":1675132189445},{"_id":"themes/anatole/README.md","hash":"88d58e69eda2435ce074bc6cafb1817346089a88","modified":1675132189441},{"_id":"themes/anatole/languages/zh-Hant-TW.yml","hash":"c6dd76e7f0daa7634d279e4a3ef794f418d0dc0b","modified":1675132189445},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1675132189445},{"_id":"themes/anatole/layout/mixins.pug","hash":"31f1e6191b8baa7e67bb9bff14fb35c544a51801","modified":1675132189445},{"_id":"themes/anatole/layout/archive.pug","hash":"5f141d7b44eacdb4ea6cee6a0c25ad6524647164","modified":1675132189445},{"_id":"themes/anatole/layout/category.pug","hash":"0c5fce6897d7869942c88f2eda10477c04d8341c","modified":1675132189445},{"_id":"themes/anatole/layout/index.pug","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1675132189445},{"_id":"themes/anatole/layout/partial/comments.pug","hash":"da588dfb18c71e62dbe0b97c006106a5724d2e45","modified":1675132189445},{"_id":"themes/anatole/layout/partial/footer.pug","hash":"772f03a2dd9fa4fed422c4eb4d5d1ace84c65580","modified":1675132189445},{"_id":"themes/anatole/layout/partial/head.pug","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1675132189445},{"_id":"themes/anatole/layout/partial/layout.pug","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1675132189445},{"_id":"themes/anatole/layout/partial/nav.pug","hash":"8b48fc12fad730bf2fe311737f30f62d508ab52f","modified":1675148629491},{"_id":"themes/anatole/layout/partial/sidebar.pug","hash":"c51709856fb458b763c0d3469ef61e35e6bf05c3","modified":1675153348803},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1675132189445},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1675132189445},{"_id":"themes/anatole/source/css/style.css","hash":"e1fbab842b4a8125160aff2e863037c9d2d409bc","modified":1675132189445},{"_id":"themes/anatole/source/css/style.css.map","hash":"5524b67d902dd810ddb6381abc4a05db2730fee2","modified":1675132189445},{"_id":"themes/anatole/layout/tag.pug","hash":"c45bbb62c3c1593b5fd396c2475061752e9b62af","modified":1675132189445},{"_id":"themes/anatole/layout/page.pug","hash":"15142c94e5c2247aba8efb64cffd695b3f133670","modified":1675132189445},{"_id":"themes/anatole/layout/post.pug","hash":"141357dc6deca6a23c5dde4a3e46dc4d9d4a1c0d","modified":1675132189445},{"_id":"themes/anatole/source/css/style.scss","hash":"7bc48b3c6f1f200ec45ee5977ca32619ed48d627","modified":1675132189445},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1675132189445},{"_id":"themes/anatole/source/images/bilibili.ico","hash":"9566a02d9d66bbeaea16df206ea4d9add214826f","modified":1675152235561},{"_id":"themes/anatole/source/images/coolapk_logo.png","hash":"eaf688f61db5928898e9873b701ee8cafab1759a","modified":1675152138450},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1675132189445},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1675132189445},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1675132189445},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1675132189445},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1675132189449},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1675132189445},{"_id":"public/about/index.html","hash":"060b91e7093bff475f4fae3f6882576968a6a0b4","modified":1675326943672},{"_id":"public/links/index.html","hash":"9f275599c8a815c8fd97cb5c4203bbff9c874716","modified":1675326943672},{"_id":"public/archives/index.html","hash":"cb096e5f543927ae1a3a2063a1b3f3fd5ed7695b","modified":1675326943672},{"_id":"public/index.html","hash":"eef839ea8047f91d84c75f7efd89994bdd8a7e1d","modified":1675326943672},{"_id":"public/tags/技术/index.html","hash":"e6ac029080694f66791663f371ef10718bbe70ed","modified":1675326943672},{"_id":"public/2022/06/10/面经笔记/index.html","hash":"6859eae037330221beb63134c75d306307828b9f","modified":1675326943672},{"_id":"public/css/style.css.map","hash":"5524b67d902dd810ddb6381abc4a05db2730fee2","modified":1675326943672},{"_id":"public/css/style.scss","hash":"7bc48b3c6f1f200ec45ee5977ca32619ed48d627","modified":1675326943672},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1675326943672},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1675326943672},{"_id":"public/images/bilibili.ico","hash":"9566a02d9d66bbeaea16df206ea4d9add214826f","modified":1675326943672},{"_id":"public/images/coolapk_logo.png","hash":"eaf688f61db5928898e9873b701ee8cafab1759a","modified":1675326943672},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1675326943672},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1675326943672},{"_id":"public/css/style.css","hash":"e1fbab842b4a8125160aff2e863037c9d2d409bc","modified":1675326943672},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1675326943672},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1675326943672},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1675326943672},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1675326943672},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1675326943672}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2023-01-31T06:46:25.000Z","_content":"\n#### 我是一个一个前端工程师\n- 2019-2023 辽宁工程技术大学 软件工程\n- 2022-至今 运去哪 前端开发\n\n#### 技术栈\n- TypeScript / JavaScript\n- React\n\n#### 一起打电动吧\n- 任天堂  `SW-4618-5588-3583`\n- Xbox  `NaiveMagic#6846`\n- Steam  `1011992523`","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-01-31 14:46:25\n---\n\n#### 我是一个一个前端工程师\n- 2019-2023 辽宁工程技术大学 软件工程\n- 2022-至今 运去哪 前端开发\n\n#### 技术栈\n- TypeScript / JavaScript\n- React\n\n#### 一起打电动吧\n- 任天堂  `SW-4618-5588-3583`\n- Xbox  `NaiveMagic#6846`\n- Steam  `1011992523`","updated":"2023-02-02T05:26:01.468Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldmuenbn00009ie6dzqe3z7k","content":"<h4 id=\"我是一个一个前端工程师\"><a href=\"#我是一个一个前端工程师\" class=\"headerlink\" title=\"我是一个一个前端工程师\"></a>我是一个一个前端工程师</h4><ul>\n<li>2019-2023 辽宁工程技术大学 软件工程</li>\n<li>2022-至今 运去哪 前端开发</li>\n</ul>\n<h4 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h4><ul>\n<li>TypeScript &#x2F; JavaScript</li>\n<li>React</li>\n</ul>\n<h4 id=\"一起打电动吧\"><a href=\"#一起打电动吧\" class=\"headerlink\" title=\"一起打电动吧\"></a>一起打电动吧</h4><ul>\n<li>任天堂  <code>SW-4618-5588-3583</code></li>\n<li>Xbox  <code>NaiveMagic#6846</code></li>\n<li>Steam  <code>1011992523</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"我是一个一个前端工程师\"><a href=\"#我是一个一个前端工程师\" class=\"headerlink\" title=\"我是一个一个前端工程师\"></a>我是一个一个前端工程师</h4><ul>\n<li>2019-2023 辽宁工程技术大学 软件工程</li>\n<li>2022-至今 运去哪 前端开发</li>\n</ul>\n<h4 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h4><ul>\n<li>TypeScript &#x2F; JavaScript</li>\n<li>React</li>\n</ul>\n<h4 id=\"一起打电动吧\"><a href=\"#一起打电动吧\" class=\"headerlink\" title=\"一起打电动吧\"></a>一起打电动吧</h4><ul>\n<li>任天堂  <code>SW-4618-5588-3583</code></li>\n<li>Xbox  <code>NaiveMagic#6846</code></li>\n<li>Steam  <code>1011992523</code></li>\n</ul>\n"},{"title":"友链","date":"2023-02-02T03:45:14.000Z","_content":"<div id=\"links-box\" style=\"margin-top: 20px;\"/>\n\n<script>\n    let links = \"\";\n    [\n        {\n            title: 'Freesia Blog',\n            url: 'https://blog.freesia.icu',\n            icon: 'https://blog.freesia.icu/assets/images/me.jpg',\n            description: '前端菜只因。'\n        },\n        {\n            title: \"Indusy's Blog🤗\",\n            url: 'https://blog.runnow.top/',\n            icon: '\thttps://blog.runnow.top/img/avatar.png',\n            description: 'Professional Linux Terminal Slave & 前端搞破坏工程师。'\n        },\n        {\n            title: '炎忍的博客',\n            url: 'https://blog.imyan.ren',\n            icon: 'https://blog.imyan.ren/media/avatar.png',\n            description: '心之所愿，无所不成。'\n        },\n    ].forEach((site) => {\n        const templeta = `<div style='padding: 20px 15px;'><a href=\"${site.url}\" target=\"_blank\"><img src=${site.icon} style='width: 50px;height: 50px;display: inline-block;vertical-align: text-bottom;border-radius: 5px;'/><h3 style=\"display: inline-block;padding: 0 20px;margin-bottom: 0;\">${site.title}</h3></a><p>${site.description}</p></div>`\n        links += templeta\n    })\n    const linksBox = document.getElementById('links-box');\n    linksBox.innerHTML = links;\n</script>","source":"links/index.html","raw":"---\ntitle: 友链\ndate: 2023-02-02 11:45:14\n---\n<div id=\"links-box\" style=\"margin-top: 20px;\"/>\n\n<script>\n    let links = \"\";\n    [\n        {\n            title: 'Freesia Blog',\n            url: 'https://blog.freesia.icu',\n            icon: 'https://blog.freesia.icu/assets/images/me.jpg',\n            description: '前端菜只因。'\n        },\n        {\n            title: \"Indusy's Blog🤗\",\n            url: 'https://blog.runnow.top/',\n            icon: '\thttps://blog.runnow.top/img/avatar.png',\n            description: 'Professional Linux Terminal Slave & 前端搞破坏工程师。'\n        },\n        {\n            title: '炎忍的博客',\n            url: 'https://blog.imyan.ren',\n            icon: 'https://blog.imyan.ren/media/avatar.png',\n            description: '心之所愿，无所不成。'\n        },\n    ].forEach((site) => {\n        const templeta = `<div style='padding: 20px 15px;'><a href=\"${site.url}\" target=\"_blank\"><img src=${site.icon} style='width: 50px;height: 50px;display: inline-block;vertical-align: text-bottom;border-radius: 5px;'/><h3 style=\"display: inline-block;padding: 0 20px;margin-bottom: 0;\">${site.title}</h3></a><p>${site.description}</p></div>`\n        links += templeta\n    })\n    const linksBox = document.getElementById('links-box');\n    linksBox.innerHTML = links;\n</script>","updated":"2023-02-02T07:33:54.473Z","path":"links/index.html","comments":1,"layout":"page","_id":"cldmuenbz00029ie6ahrq5p40","content":"<div id=\"links-box\" style=\"margin-top: 20px;\"/>\n\n<script>\n    let links = \"\";\n    [\n        {\n            title: 'Freesia Blog',\n            url: 'https://blog.freesia.icu',\n            icon: 'https://blog.freesia.icu/assets/images/me.jpg',\n            description: '前端菜只因。'\n        },\n        {\n            title: \"Indusy's Blog🤗\",\n            url: 'https://blog.runnow.top/',\n            icon: '\thttps://blog.runnow.top/img/avatar.png',\n            description: 'Professional Linux Terminal Slave & 前端搞破坏工程师。'\n        },\n        {\n            title: '炎忍的博客',\n            url: 'https://blog.imyan.ren',\n            icon: 'https://blog.imyan.ren/media/avatar.png',\n            description: '心之所愿，无所不成。'\n        },\n    ].forEach((site) => {\n        const templeta = `<div style='padding: 20px 15px;'><a href=\"${site.url}\" target=\"_blank\"><img src=${site.icon} style='width: 50px;height: 50px;display: inline-block;vertical-align: text-bottom;border-radius: 5px;'/><h3 style=\"display: inline-block;padding: 0 20px;margin-bottom: 0;\">${site.title}</h3></a><p>${site.description}</p></div>`\n        links += templeta\n    })\n    const linksBox = document.getElementById('links-box');\n    linksBox.innerHTML = links;\n</script>","site":{"data":{}},"excerpt":"","more":"<div id=\"links-box\" style=\"margin-top: 20px;\"/>\n\n<script>\n    let links = \"\";\n    [\n        {\n            title: 'Freesia Blog',\n            url: 'https://blog.freesia.icu',\n            icon: 'https://blog.freesia.icu/assets/images/me.jpg',\n            description: '前端菜只因。'\n        },\n        {\n            title: \"Indusy's Blog🤗\",\n            url: 'https://blog.runnow.top/',\n            icon: '\thttps://blog.runnow.top/img/avatar.png',\n            description: 'Professional Linux Terminal Slave & 前端搞破坏工程师。'\n        },\n        {\n            title: '炎忍的博客',\n            url: 'https://blog.imyan.ren',\n            icon: 'https://blog.imyan.ren/media/avatar.png',\n            description: '心之所愿，无所不成。'\n        },\n    ].forEach((site) => {\n        const templeta = `<div style='padding: 20px 15px;'><a href=\"${site.url}\" target=\"_blank\"><img src=${site.icon} style='width: 50px;height: 50px;display: inline-block;vertical-align: text-bottom;border-radius: 5px;'/><h3 style=\"display: inline-block;padding: 0 20px;margin-bottom: 0;\">${site.title}</h3></a><p>${site.description}</p></div>`\n        links += templeta\n    })\n    const linksBox = document.getElementById('links-box');\n    linksBox.innerHTML = links;\n</script>"}],"Post":[{"title":"前端面经笔记","date":"2022-06-10T10:10:06.000Z","_content":"\n**之前准备面试做的笔记，从三件套到浏览器，应该算是比较全面的基础前端~八股文~知识整理**\n\n## HTML\n\n####  HTML 语义化\n\n使用语义化标签而不是div, span\n\n作用:\n\n​\t\t1.使人更易理解\n\n​\t\t2.SEO 使机器(搜索引擎 爬虫)能够理解\n\n\n\n#### 行级块级元素（块状，内联）\n\ndisplay:block/table\n\n​\t\t有div h1 h2 table ul ol p等\ndisplay: inline/inline-block\n\n​\t\t有 span img input button等\n\n\n\n#### script 标签中 defer 和 async\n\n普通的sript：阻止HTML解析，下载并加载完后才会继续解析HTML\n\ndefer：异步下载，同步加载（HTML加载完后才会加载）\n\nasync：异步下载和加载，可能会阻碍HTML解析\n\n\n\n\n\n## CSS\n\n#### 盒模型宽度计算\n\nwidth+padding\\*2+boder\\*2\n\n使宽度计算方式包括内边距和边框:box-sizing: border-box;\n\n\n\n#### margin\n\n##### 重叠\n\n相邻元素的margin-top和margin-bottom会重叠\n\n空白内容也会发生重叠\n\n##### 负值\n\nmargin-top和margin-left负值，元素向上、向左移动\nmargin-right和margin-bottom负值，右侧元素左移，下方元素上移，**自身不受影响**\n\n\n\n#### BFC\n\nBlock format context ,块级格式化上下文\n\n一块独立渲染区域，内部元素的渲染不会影响边界以外的元素\n\n形成BFC的常见条件\n\t\tfloat不是none\n\t\tposition 是 absolute 或 fixed\n\t\toverflow不是visible\n\t\tdisplay 是 flex inline-block等\n\n\n\n#### float\n\n##### 两栏布局\n\n（左侧固定 + 右侧自适应布局）\n\n现在有以下 DOM 结构：\n\n```html\n<div class=\"outer\">\n  <div class=\"left\">左侧</div>\n  <div class=\"right\">右侧</div>\n</div>\n```\n\n1. 利用浮动，左边元素宽度固定 ，设置向左浮动。将右边元素的 `margin-left` 设为固定宽度 。注意，因为右边元素的 `width` 默认为 `auto` ，所以会自动撑满父元素。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  margin-left: 200px;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 `overflow: hidden;` 这样右边就触发了 `BFC` ，`BFC` 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  overflow: auto;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用 `flex` 布局，左边元素固定宽度，右边的元素设置 `flex: 1` 。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  flex: 1;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用绝对定位，父级元素设为相对定位。左边元素 `absolute` 定位，宽度固定。右边元素的 `margin-left` 的值设为左边元素的宽度值。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  position: absolute;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  margin-left: 200px;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用绝对定位，父级元素设为相对定位。左边元素宽度固定，右边元素 `absolute` 定位， `left` 为宽度大小，其余方向定位为 `0` 。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  position: absolute;\n  left: 200px;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n\n\n##### 三栏布局\n\n**圣杯**:\n\n```html\n<header style=\"background-color: rgb(233, 233, 233);\">header</header>\n    <container class=\"container\">\n        <div class=\"center\">center</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </container>\n<footer style=\"background-color: rgb(233, 233, 233);\">footer</footer>\n```\n\n```css\n.container {\n    display: block;\n    padding-left: 200px;\n    padding-right: 300px;\n}\n\n.center {\n    float: left;\n    background-color: bisque;\n    width: 100%;\n}\n\n.left {\n    position: relative;\n    float: left;\n    background-color: aqua;\n    width: 200px;\n    margin-left: -100%;\n    right: 200px;\n}\n\n.right {\n    float: left;\n    background-color: aquamarine;\n    width: 300px;\n    margin-right: -300px;\n}\n\nfooter {\n    clear: both;\n}\n```\n\n**双飞翼**:\n\n```html\n<div id=\"main\">\n    <div id=\"main-wrap\">\n        main\n    </div>\n</div>\n<div id=\"left\">\n    left\n</div>\n<div id=\"right\">\n    right\n</div>\n```\n\n```css\n#main {\n    width: 100%;\n    height: 200px;\n    background-color: greenyellow;\n    float: left;\n}\n\n#main-wrap {\n    margin-left: 200px;\n    margin-right: 250px;\n}\n\n#left {\n    width: 200px;\n    height: 200px;\n    background-color: aqua;\n    float: left;\n    margin-left: -100%;\n}\n\n#right {\n    width: 250px;\n    height: 200px;\n    background-color: lightgreen;\n    float: left;\n    margin-left: -250px;\n}\n```\n\nclear fix:\n\n```\n.clearfix:after {\n\tcontent: '' ;\n\tdisplay:table;\n\tclear:both;\n}\n.clearfix {\n\t*zoom:1;/*兼容IE低版本*/\n}\n```\n\n#### flex\n\nflex-direction 主轴方向\n\njustify-content 主轴对齐方式\n\nalign-items 交叉轴对齐方式\n\nflex-wrap 换行\n\nalign-self 子元素交叉轴对齐\n\n**画个色子**\n\n```html\n<div class=\"box\">\n    <span class=\"item\"></span>\n    <span class=\"item\"></span>\n    <span class=\"item\"></span>\n</div>\n```\n\n```css\n.box {\n    width: 200px;\n    height: 200px;\n    border: 2px solid #ccc;\n    border-radius: 10px;\n    padding: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.item {\n    display: block;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: palevioletred;\n}\n\n.item:nth-child(2) {\n    align-self: center;\n}\n\n.item:nth-child(3) {\n    align-self: flex-end;\n}\n```\n\n\n\n#### position\n\n**absolute和relative分别依据什么定位？**\n\nrelative依据**自身定位**\n\n自身位移并**作为**子元素(如果有)的**定位基准**\n\n\n\nabsolute依据最近一层的**定位元素**定位\n\n定位元素\n\t**absolute** relative fixed\n\tbody(找不到absolute时)\n\n\n\n#### 居中对齐实现方式\n\n水平居中\n\tinline元素：text-align:center\n\tblock元素：margin:auto\n\tabsolute元素：left:50%+**margin-left负值**(必须知道子元素尺寸) -宽度/2\n\n垂直居中\n\tinline元素：line-height的值等于height值\n\tabsolute元素：top:50%+margin-top负值\n\tabsolute元素：transform(-50%,-50%)\n\n​\tabsolute元素：top,left,bottom,right=0+margin:auto\n\n\n\n#### line-height 继承方式:\n\n具体数值，如30px,则继承该值\n比例，如2/1.5,则继承该比例\n**百分比**，如200%,则继承**计算出来的值**\n\n\n\n#### 响应式(rem/vw/vh)\n\npx,绝对长度单位，最常用\nem,相对长度单位，相对于父元素，不常用\n\nroot em rem,相对长度单位，相对于根元素，常用于响应式布局\n\nvh网页视口高度的1/100\nvw网页视口宽度的1/100\nvmax 取两者最大值；vmin取两者最小值\n\n\n\n**响应式布局的常用方案**\n\nmedia-query,根据不同的屏幕宽度设置根元素 font-size\nrem,基于根元素的相对单位\n\n\n\n**网页视口尺寸**\n\nwindow.screen.height//屏幕高度\nwindow.innerHeight//网页视口高度\ndocument.body.clientHeight//body高度\n\n\n\n## JS\n\n### 变量类型和计算\n\n**值类型和引用类型的区别**\n\n引用类型vs值类型\n\n引用：储存内存地址（对象，数组，函数等）\n\n\n\n**typeof 能判断哪些类型**\n\n识别所有值类型\n识别函数\n判断是否是引用类型(object)（不可再细分）\n\n\n\n**变量计算-类型转换**\n\n字符串拼接: 拼接时有字符串则会转换为字符串 如  a = true + 'wdnmd'    //'truewdnmd'\n\n**何时使用===何时使用==**\n\n除==null，用===\n==:  '' == false -> true; 0 == false -> true; null == undifined -> true\n\nif 语句和逻辑运算 : !!(0/NaN/''/null/undefined/false) 为falsely变量，其他为truly\n\n\n\n**深拷贝**\n\nhandle\\1-深拷贝.ts\n\n\n\n### 原型原型链\n\nclass 和继承\n\n类型判断 instanceof\n\n原型和原型链\n\n\n\n**如何准确判断一个变量是不是数组？**\n\nval instanceof Array // true/false\n\n\n\n手写一个简易的jQuery,考虑插件和扩展性\n\nclass jQuery {}\njQuery.prototype.chajian = function(args){}\nclass jjQuery extends jQuery {}\n\n\n\n**class 的原型本质，怎么理解？**\n\n每个class都有显示原型prototype\n每个实例都有隐式原型\\_\\_proto\\_\\_\n实例的\\_\\_proto\\_\\_指向对应class的prototype\n\n\n\n\n\n### 作用域和闭包\n\n**作用域和自由变量**\n\n全局作用域\n函数作用域\n块级作用域（ES6新增）\n\n一个变量在当前作用域没有定义，但被使用了\n向上级作用域，一层一层依次寻找，直至找到为止\n如果到全局作用域都没找到，则报错xx is not defined\n\n\n\n**闭包**\n\n函数中自由变量的查找在函数定义的地方而不是执行的地方\n在函数定义的时候，如果当前作用域有被引用的变量，则会形成闭包\n\n\n\n**this**\n\n取值是在函数执行时确定的，而不是定义时确定的\n作为对象方法执行作用域为上级对象\nsetTimeout的this指向window\n箭头函数this的取值始终为上级作用域\n\n**this 的不同应用场景，如何取值？**\n\n当做普通函数被调用: 执行时作用域\n使用call apply bind: 指定作用域\n作为对象方法调用: 上级对象\n在class的方法中调用: 对象本身\n箭头函数: 上级作用域\n\n\n\n手写 bind 函数\n\nhandle\\2-bind.ts\n\n\n\n实际开发中闭包的应用场景，举例说明\n\n隐藏数据,只提供api\n\n\n\n### 异步\n\n**单线程和异步**\n\nJS是单线程语言，只能同时做一件事儿\n浏览器和 nodejs 已支持JS启动进程，如Web Worker\nJS和DOM渲染共用同一个线程，因为JS可修改DOM结构\n\n\n\n应用场景\n\n网络请求，如ajax图片加载\n定时任务，如 setTimeout\n\n\n\ncallback hell 和 Promise\n\n\n\n同步和异步的区别是什么？\n\n基于JS是单线程语言\n异步不会阻塞代码执行\n同步会阻塞代码执行\n\n\n\n手写用 Promise 加载一张图片\n\npromise.ts\n\n\n\n前端使用异步的场景有哪些？\n\n网络请求，如ajax图片加载\n定时任务，如setTimeout\n\n \n\n#### event loop 事件循环\n\nJS如何执行？\n\n从前到后，一行一行执行\n如果某一行执行报错，则停止下面代码的执行\n先把同步代码执行完，再执行异步\n\n\n\n**event loop**\n\n同步代码，一行一行放在Call Stack执行\n遇到异步，会先“记录”下，等待时机（定时、网络请求等）\n时机到了，就移动到 Callback Queue\n如 Call Stack为空（即同步代码执行完）Event Loop开始工\n轮询查找 Callback Queue,如有则移动到 Call Stack 执行\n然后继续轮询查找（永动机一样）\n\n\n\n**DOM 事件和 event loop**\n\nJS是单线程的\n异步（setTimeout,ajax等）使用回调，基于event loop\nDOM 事件也使用回调，基于 event loop\n\n\n\n#### Promise\n\n**三种状态**\n\npending resolved rejected\npending -> resolved 或 pending -> rejected\n变化不可逆\n\n\n\n**状态的表现和变化**\n\npending状态，不会触发then和catch\nresolved 状态，会触发后续的 then 回调函数\nrejected状态，会触发后续的catch回调函数\n\n\n\n**then 和 catch 对状态的影响**\n\nthen 正常返回 resolved,里面有报错则返回 rejected\ncatch 正常返回 resolved,里面有报错则返回 rejected\n\n\n\n#### async/await\n\n异步回调 callback hell\nPromise then catch 链式调用，但也是基于回调函数\nasync/await是同步语法，彻底消灭回调函数\n\n\n\n**async/await和Promise的关系**\n\n执行**async**函数，**返回**的是**Promise对象** (值封装为Promise对象，Promise直接返回)\nawait 相当于 Promise 的 then\ntry...catch 可捕获异常，代替了 Promise 的 catch\n\n\n\n**for ... of**\n\nfor...in(以及forEach for)是常规的同步遍历\nfor...of 常用于异步的遍历\n\n\n\n#### 宏任务 macroTask和微任务 microTask\n\n**什么是宏任务，什么是微任务**\n\n宏任务：setTimeout,setInterval,Ajax,DOM事件\n微任务：Promise async/await\n微任务执行时机比宏任务要早\n\n\n\n\n**event loop 和 DOM 渲染**\n每次Call Stack清空（即每次轮询结束）,即同步任务执行完\n都是DOM重新渲染的机会，DOM结构如有改变则重新渲染\n然后再去触发下一次 Event Loop\n\n\n\n**微任务和宏任务的区别**\n\n宏任务：DOM渲染后触发，如setTimeout\n微任务：DOM渲染前触发，如Promise\n\n微任务是ES6语法规定的\n宏任务是由浏览器规定的\n\n\n\n宏任务有哪些？微任务有哪些？微任务触发时机更早\n微任务、宏任务和DOM渲染的关系\n微任务、宏任务和DOM渲染，在eventloop的过程\n\n\n\n#### 手写promise\n\n3-promise.ts\n\n\n\n## JS Web API\n\n## DOM\n\nDOM 本质\n\n从HTML解析出来的一棵树\n\n\n\n**DOM 节点操作**\n\n获取DOM节点\n\n```javascript\nconst div1 = document.getElementById('div1')//元素\nconst divList = document.getElementsByTagName('div')//集合\nconst containerList = document.getElementsByClassName('.container')//集合\nconst pList = document.querySelectorAll('p')//集合\n\nconst p = pList[0]\n```\n\n\n\n**property**:修改对象属性，不会体现到html结构中\n\n```javascript\nconsole.log(p.style.width)//获取样式\np.style.width='100px'//修改样式\n\nconsole.log(p.className)//获取class\np.className='p1'//修改 class\n\n//获取 nodeName 和 nodeType\nconsole.log(p.nodeName)\nconsole.log(p.nodeType)\n```\n\n**attribute**:修改html属性，会改变html结构\n\n```javascript\np.setAttribute('data-name','imooc')\no.setAttribute('style','font-size:30px;')\np.getAttribute('data-name')//imooc\np.getAttribute('style')//font-size:30px;\n```\n\n两者都有可能引起DOM重新渲染\n\n\n\n**DOM 结构操作**\n\n新增/插入节点\n\n```javascript\n//新建节点\nconst newP = document.createElement('p')\nnewP.innerHTML='this is newp'\n//插入节点\ndiv1.appendChild(newP)\n\n//移动节点(已在DOM中的节点appendChild不会复制)\nconst oldp = document.getElementById('oldp')\ndiv2.appendChild(oldp)\n```\n\n获取父元素，子元素列表\n\n```javascript\n//获取父元素\nconst divl = document.getElementById('div1')\nconst parent = divl. parentNode\n//获取子元素列表\nconst divl = document.getElementById('divl')\nconst child = div1.childNodes\nconst child=Array.prototype.slice.call(div1.childNodes).filter(child => {\n    if(child.nodeType === 1) return true;\n    return false;\n})\n```\n\n删除子元素\n\n```javascript\ndiv1.removeChild(child[0])\n```\n\n\n\n**DOM 性能**\n\nDOM操作非常“昂贵”，避免频繁的DOM操作\n对DOM查询做**缓存**\n将**频繁**操作改为**一次性**操作\n\n\n\n\n\n## BOM\n\nnavigator\n\n如何识别浏览器的类型\nnavigator.userAgent\n\n\n\nscreen\n\nscreen.width\nscreen.height\n\n\n\nlocation\n\n网址：location.href\n协议：location.protocol\n域名：location.host\n协议+ 域名：location.origin\n路径：location.pathname\n参数：location.search\n锚点：location.hash\n\n\n\nhistory\n\n后退：history.back\n前进：history.forward\n\n\n\n\n\n## 事件\n\n**事件绑定**\n\n```javascript\nconst btn = doucument.getElementById('btn');\nbtn.setEventListener('click',e => {alert('click')})\n\n// console.log(e.target)//获取触发的元素\n// event.preventDefault()//阻止默认行为\n```\n\n### 什么是事件流\n\n事件流描述的就是从页面中接收事件的顺序。而早期的IE和Netscape提出了完全相反的事件流概念，IE事件流是事件冒泡，而Netscape的事件流就是事件捕获。\n\n**事件冒泡**\n\n事件会传递给父元素\n```javascript\n// e.stopPropagation() //阻止冒泡\n```\n\n**事件代理**\n\n代码简洁\n减少浏览器内存占用\n但是，不要滥用\n\n```javascript\ndiv.addEventListener('click', e => {\n    event.preventDefault();\n    const target = event.target\n    if(target.nodeName === 'A'){\n        alert(target.innerHTML)\n    }\n})\n```\n\n\n\n\n\n编写一个通用的**事件监听函数**\n\n```javascript\n// function bindEvent(ele, type, fn){\n//     ele.addEventListener(type,fn)\n// }\n\nfunction bindEvent(ele, type, selector, fn){\n    if(!fn){\n        fn = selector\n        selector = null\n    }\n    ele.addEventListener(type,e => {\n\t\tconst target = e.target\n        if(selector){\n            if(target.matches(selector)){\n                fn.call(target, e)\n            }\n        } else {\n            fn.call(target, e)\n        }\n    })\n}\n\n//普通绑定\nbindEvent(btn, 'click', function(e) {\n    e.preventDefault();\n    alert(this.innerHTML)\n})\n//代理绑定\nbindEvent(div, 'click', 'a', function(e) {\n    e.preventDefault();\n    alert(this.innerHTML)\n})\n```\n\n\n\n描述事件冒泡的流程\n\n基于DOM树形结构\n事件会顺着触发元素往上冒泡\n应用场景：代理\n\n\n\n无限下拉的图片列表，如何监听每个图片的点击？\n\n事件代理\n用 e.target获取触发元素\n用matches来判断是否是触发元素\n\n\n\n## ajax\n\nXMLHttpRequest\n\nxhr.readyState\n0-UNSET尚未调用open方法\n1-OPENED open方法已被调用\n2-HEADERS_RECEIVED send方法已被调用，header已被接收\n3-LOADING 下载中，responseText已有部分内容\n4-DONE 下载完成\n\n\n\n状态码\n\nxhr.status\n·2xx - 表示成功处理请求，如200\n·3xx - 需要重定向，浏览器直接跳转，如301 302 304\n·4xx - 客户端请求错误，如404 403\n·5xx - 服务器端错误\n\n\n\n手写一个简易的 ajax\n\n```javascript\nfunction ajax(url: string) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true)\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseText)\n                } else if (xhr.status === 404) {\n                    reject(new Error('404NotFound'))\n                }\n            }\n        }\n        xhr.send(null)\n    })\n\n}\n```\n\n\n\n跨域：同源策略，跨域解决方案\n\n什么是跨域（同源策略）\n\najax请求时，浏览器要求当前网页和server必须同源（安全）\n同源：**协议、域名、端口，三者必须一致**\n前端：http://a.com:8080/  server:https://b.com/api/xxx\n\n\n\n**\\<img/>**可用于统计打点，可使用第三方统计服务\n**\\<link/>\\<script>**可使用CDN,CDN一般都是外域\n**\\<script>**可实现JSONP\n\n\n\n所有的跨域，都必须经过 server 端允许和配合\n未经server端允许就实现跨域，说明浏览器有漏洞，危险信号\n\n\n\n\n\n**JSONP**\n\n服务器可以返回任何内容**\\<script>可绕过跨域限制**\n**服务器**可以任意**动态拼接数据返回**\n所以，\\<script>就可以获得跨域的数据，只要服务端愿意返回\n\n\n\n**CORS**(服务端支持)\n\n\n\n常见方式：\n\n1. jsop\nhtml中的script src属性获取其他源的数据\n\\<script>\nfunction getData(res){\nconsole.Log(res)\n\\</script>\n\\<script src=\"http://www.baidu.com/news?callback=getData\">\n\n2.cors跨域资源共享支持所有的主流浏览器ie9+\nXMLHttpRequest发送请求的时候，如果不同源，heaters{Origin}\n后台处理：Access-control-allow-origin:\n\n3.h5 window.postMessage跨域 主流浏览器 ie8+\nwindow.postMessage(\"字符串\",\"*\")\n\n注意：vue中跨域：:代理proxy··本质上·cors跨域\nvue.config.js.\nproxy:{\ntarget:\nchangeorigin:\npathRewrite:\n\n\n\n## 存储\n\n**cookie**\n\n本身用于浏览器和 server 通讯\n被“借用”到本地存储来\n可用 document.cookie = ... 来修改\n\ncookie 的**缺点**\n\n存储大小，最大**4KB**\nhttp请求时**需要发送到服务端**，增加请求数据量\n只能用 document.cookie = …来修改，太过简陋\n\n\n\n**localStorage 和 sessionStorage**\n\nHTML5专门为存储而设计，最大可存**5M**\nAPI简单易用 **setItem getItem**\n不会随着http请求被发送出去\n\nlocalStorage 数据会**永久存储**，除非代码或手动删除\nsessionStorage 数据只存在于**当前会话**，浏览器关闭则清空\n一般用localStorage会更多一些\n\n\n\n描述cookie localStorage sessionStorage 区别\n\n容量\nAPI易用性\n是否跟随http请求发送出去\n\n\n\n## HTTP\n\n前端工程师开发界面\n需要调用后端的接口，提交/获取数据——http协议\n要求事先掌握好ajax\n\n\n\n### http 状态码\n\n**状态码分类**\n\n1xx服务器收到请求\n2xx请求成功，如200\n3xx重定向，如302\n4xx客户端错误，如404\n5xx服务端错误，如500\n\n\n\n**常见状态码**\n\n200成功\n201请求成功并创建新资源  POST/PUT 请求\n204满足请求 不需要刷新表单或页面 表单或者删除\n301永久重定向（配合location,浏览器自动处理\n302临时重定向（配合location,浏览器自动处理）\n304资源未被修改 浏览器缓存\n400服务器由于客户端错误而无法理解和处理请求\n401当需要身份验证但失败或未提供身份验证\n403没有权限\n404资源未找到\n409同时更新或版本相互冲突\n410请求的资源不再可用\n500服务端错误\n504网关超时\n\n\n\n\n关于协议和规范\n\n就是一个约定\n要求大家都跟着执行\n不要违反规范，例如IE浏览器\n\n\n\n### http methods\n\n传统的methods\n\nget获取服务器的数据\npost像服务器提交数据\n简单的网页功能，就这两个操作\n\n\n\n现在的methods\n\nget 获取数据\npost 新建数据\npatch/put更新数据\ndelete删除数据\n\n\n\n**Restful API**\n\n一种新的API设计方法（早已推广使用）\n传统API设计：把每个url当做一个**功能**\nRestful API设计：把每个url当做一个**唯一的资源**\n\n如何设计成一个资源？\n\n不用url参数\n\n传统API设计：/api/list?pageIndex=2\nRestful API设计：/api/list/2\n\n\n\n用**method**表示**操作类型**\n\n传统API设计\n\npost请求/api/create-blog\npost请求/api/update-blog?id=100\nget请求/api/get-blog?id=100\n\nRestful API设计\n\npost请求/api/blog\npatch 请求 /api/blog/100\nget 请求 /api/blog/100\n\n\n\n**http headers**\n常见的 **Request** Headers\n\nAccept 浏览器可接收的数据格式\nAccept-Encoding浏览器可接收的压缩算法，如gzip\nAccept-Languange 浏览器可接收的语言，如 zh-CN\nConnection:keep-alive一次TCP连接重复使用\ncookie\nHost\nUser-Agent(简称UA)浏览器信息\nContent-type 发送数据的格式，如 application/json\n\n\n\n\n常见的 **Response** Headers\n\nContent-type 返回数据的格式，如 application/json\nContent-length 返回数据的大小，多少字节\nContent-Encoding 返回数据的压缩算法，如 gzip\nSet-Cookie\n\n\n\n**缓存**相关的headers\n\nCache-Control Expires\nLast-Modified If-Modified-Since\nIf-None-Match\nEtag\n\n\n\n### http缓存\n\n什么是缓存？\n为什么需要缓存？\n哪些资源可以被缓存？一静态资源（js css img)\n\n\n\n#### 强缓存与协商缓存\n\n**强缓存**：\n\n​\t\t如果没有过期，浏览器可以直接使用该缓存而不需要重新向服务器请求\n\n​\t\tExpires 存在于响应头，为缓存过期时间点\n\n​\t\tCache-Control 存在于响应头和请求头，为缓存过期时常\n\n\n\n**Cache-Control**\n\nResponse Headers 中\n控制强制缓存的逻辑\n例如 Cache-Control:max-age=31536000(单位是秒）\n\n**max-age** 过期时长\n**no-cache** 不用强制缓存\nno-store 不用任何缓存\n\nprivate 只允许最终用户缓存\npublic 允许路由/代理缓存\n\n\n\nExpires\n\n同在 Response Headers 中\n同为控制缓存过期\n已被 Cache-Control 代替\n\n\n\n**协商缓存**：\n\n​\t\t不能直接使用该缓存，始终向服务器询问是否需要更新\n\n\n\n服务器端缓存策略\n服务器判断客户端资源，是否和服务端资源一样\n一致则返回304,否则返回200和最新的资源\n\n\n\n在Response Headers中，有两种\n\n**Last-Modified** 资源的最后修改时间\n**Etag** 资源的唯一标识（一个字符串，类似人类的指纹）\n\n\n\n\n### 版本\n\nHTTP/0.9\n\n-  只有一个命令GET\n-  响应类型: 仅超文本\n-  没有header等描述数据的信息\n-  服务器发送完毕，就关闭TCP连接\n\nHTTP/1.0\n\n-  增加了很多命令（post HESD ）\n-  增加`status code` 和 `header`\n-  多字符集支持、多部分发送、权限、缓存等\n-  响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)\n\nHTTP/1.1\n\n-  持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）\n-  支持的方法: `GET` , `HEAD` , `POST` , `PUT` ,`DELETE` , `TRACE` , `OPTIONS`\n-  进行了重大的性能优化和特性增强，分块传输、压缩/解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽\n\nHTTP2\n\n-  所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮\n-  同一个连接里面发送多个请求不再需要按照顺序来\n-  头信息压缩以及推送等提高效率的功能\n\nHTTP3\n\n-  QUIC“快速UDP互联网连接”（Quick UDP Internet Connections）\n\nHTTP3 的主要改进在传输层上。传输层不会再有我前面提到的那些繁重的 TCP 连接了。现在，一切都会走 UDP。\n\n\n\n### HSTS\n\nHTTP Strict Transport Security，简单说就是强制客户端使用 HTTPS 访问页面\n\n原理：\n\n- 在服务器响应头中添加 `Strict-Transport-Security`，可以设置 `max-age`\n- 用户访问时，服务器种下这个头\n- 下次如果使用 http 访问，只要 max-age 未过期，客户端会进行内部跳转，可以看到 307 Redirect Internel 的响应码\n- 变成 https 访问源服务器\n\n\n\n### HTTP协议特点\n\n1. 支持客户/服务器模式。\n2. 简单快速客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n\n\n### TCP\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP/IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层\n\n#### 连接三次握手\n\n第一次握手：主机A发送位码为`SYN＝1`，随机产生`Seq  number=1234567`的数据包到服务器，主机B由`SYN=1`知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）\n\n第二次握手：主机B收到请求后要确认联机信息，向A发送`ack number=(主机A的seq+1)`，`SUN=1，ACK=1234567 + 1`，随机产生`Seq=7654321`的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）\n\n第三次握手：主机A收到后检查`ack number`是否正确，即第一次发送的`seq number+1`，以及位码`SYN`是否为1，若正确，主机A会再发送`ack number=(主机B的seq+1)`，`ack=7654321 + 1`，主机B收到后确认`Seq`值与`ACK=7654321+ 1`则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）\n\n#### 断开四次分手\n\n刚开始双方都处于established状态，假如是客户端先发起关闭请求\n\n第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态\n\n第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态\n\n第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送FIN报文，且指定一个序列号。此时服务端处于LAST_ACK的状态\n\n需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态，服务端收到ACK报文之后，就处于关闭连接了，处于CLOSED状态。\n\n\n\n\n\n## 开发环境\n\ngit\n\n常用git命令\n\ngit add .    添加\ngit checkout xxx     还原\ngit commit - m \" xxx \"    提交\ngit push origin master    推送\ngit pull origin master    拉去\ngit branch    分支\ngit checkout -b xxx  新建分支 / git checkout XXX    切换分支\ngit merge xxx    合并分支\ngit stash   暂存   git stash pop   恢复暂存\n\n\n\n抓包\n\n移动端h5页，查看网络请求，需要用工具抓包\nwindows 一般用 fiddler\nMac OS 一般用 charles\n\n\n\nwebpack babel\n\nES6模块化，浏览器暂不支持\nES6语法，浏览器并不完全支持\n压缩代码，整合代码，以让网页加载更快\n\n\n\n\n\n## 运行环境\n\n运行环境即浏览器（server端有nodejs)\n下载网页代码，渲染出页面，期间会执行若干JS\n要保证代码在浏览器中：稳定且高效\n\n\n\n### 网页加载过程\n\n加载资源的**形式**\n\nhtml代码\n媒体文件，如图片、视频等\njavascript css\n\n**加载过程**\n\nDNS解析：域名-&gt;IP地址\n浏览器根据IP地址向服务器发起http请求\n服务器处理http请求，并返回给浏览器\n\n**渲染**过程\n\n根据HTML代码生成DOM Tree\n根据CSS代码生成CSSOM\n将DOM Tree和CSSOM整合行程Render Tree\n根据Render Tree 渲染页面\n遇到\\<script>则暂停渲染，优先加载并执行JS代码，完成再继续\n直至把 Render Tree 渲染完成\n\n#### 页面渲染\n\nHTML生成**DOM**树，CSS生成**对象模型**(**CSSDOM**)\n\nDOM树与CSSDOM合并生成**渲染树**\n\n浏览器根据渲染树计算后生成**布局树**Layout Tree\n\n最后将画面绘制到屏幕上\n\n\n\n**window.onload 和 DOMContentLoaded 区别**\n\nwindow.onload资源全部加载完才能执行，包括图片\nDOMContentLoaded DOM 渲染完成即可，图片可能尚未下载\n\n\n\n#### 性能优化\n\n是一个综合性问题，没有标准答案，但要求尽量全面\n某些细节问题可能会单独提问：手写防抖、节流\n\n\n\n**性能优化原则**\n\n多使用内存、缓存或其他方法\n减少CPU计算量，减少网络加载耗时\n(适用于所有编程的性能优化——空间换时间）\n\n**让加载更快**\n减少资源体积：压缩代码\n减少访问次数：合并代码，SSR服务器端渲染，缓存\n使用更快的网络：CDN\n\n**缓存**\n静态资源加 hash 后缀，根据文件内容计算 hash\n文件内容不变，则hash不变，则url不变\nurl和文件不变，则会自动触发http缓存机制，返回304\n\n**SSR**\n服务器端渲染：将网页和数据一起加载，一起渲染\n非SSR(前后端分离）:先加载网页，再加载数据，再渲染数据\n早先的JSP ASP PHP,现在的vue React SSR\n\n\n\n**让渲染更快**\nCSS 放在 head ,JS 放在 body 最下面\n尽早开始执行JS,用DOMContentLoaded触发\n懒加载（图片懒加载，上滑加载更多）\n对DOM查询进行缓存\n频繁DOM操作，合并到一起插入DOM结构\n**节流 throttle** **防抖 debounce**\n\n```javascript\nconst p = document.getElementsByTagName('p');\n```\n\n\n\n**防抖 debounce**\n\n监听一个输入框的，文字变化后触发change事件\n直接用keyup事件，则会频发触发change事件\n防抖：用户输入结束或暂停时，才会触发change事件\n\n```javascript\nconst debounce = (fn: Function, delay: number = 500): EventListener => {\n    let timer: NodeJS.Timeout;\n    return function () {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            //@ts-ignore\n            fn.apply(this, arguments);\n        }, delay)\n    }\n}\n\np[0].addEventListener('click', debounce(function () {\n    console.log(p[0]);\n}, 600))\n```\n\n\n\n**节流 throttle**\n\n拖拽一个元素时，要随时拿到该元素被拖拽的位置\n直接用drag事件，则会频发触发，很容易导致卡顿\n节流：无论拖拽速度多快，都会每隔100ms触发一次\n\n```javascript\nconst throttle = (fn: Function, delay: number = 100): EventListener => {\n    let timer: NodeJS.Timeout | null = null;\n    return function () {\n        if (timer) return;\n        timer = setTimeout(() => {\n            //@ts-ignore\n            fn.apply(this, arguments);\n            timer = null;\n        }, delay)\n    }\n}\n\n\np[0].addEventListener('drag', throttle(\n    function (e: any) {\n        console.log(e.offsetX, e.offsetY)\n    }, 500)\n);\n```\n\n\n\n\n\n### 浏览器\n\n#### URL\n\n协议://主(ex.com)机:端口/路(a/b)径 ?查询(k=v&k=v)参数#锚点\n\n\n\n#### DNS\n\n从域名获取IP地址\n\n根域名服务器，顶级域名服务器，主域名服务器\n\n递归查询\n\n​\t\t客户端只发一次请求，要求对方给出最终结果。\n\n​\t\t浏览器缓存，系统缓存，路由器缓存，ISP(运营商)DNS缓存：统称为DNS高速缓存\n\n​\t\t若当前DNS服务器没有，则服务器会继续向其他DNS服务器查询\n\n迭代查询\n\n​\t\t客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表，客户端会再向返回的列表中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。\n\n​\t\t当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。\n\n\n\n### 安全\n\n**XSS跨站请求攻击**\n\n一个博客网站，我发表一篇博客，其中嵌入\\<script>脚本\n脚本内容：获取cookie,发送到我的服务器（服务器配合跨域）\n发布这篇博客，有人查看它，窃取访问者的cookie\n\n**XSS 预防**(xss 工具)\n\n替换特殊字符，如&lt;变为&lt;&gt;变为&gt;\n\\<script>变为 \\&lt;script\\&gt;,直接显示，而不会作为脚本执行\n前端要替换，后端也要替换，都做总不会有错\n\n\n\n**XSRF跨站请求伪造**\n\n你正在购物，看中了某个商品，商品id是100\n付费接口是xxx\\.com/pay?id=100,但没有任何验证\n我是攻击者，我看中了一个商品，id是200\n我向你发送一封电子邮件，邮件标题很吸引人\n但邮件正文隐藏着&lt;img src=xxx\\.com/pay?id=200/&gt;\n你一查看邮件，就帮我购买了id是200的商品\n\n**XSRF 预防**\n\n使用post接口\n增加验证，例如密码、短信验证码、指纹等","source":"_posts/面经笔记.md","raw":"---\ntitle: 前端面经笔记\ndate: 2022-06-10 18:10:06\ntags: \n    - 技术\n---\n\n**之前准备面试做的笔记，从三件套到浏览器，应该算是比较全面的基础前端~八股文~知识整理**\n\n## HTML\n\n####  HTML 语义化\n\n使用语义化标签而不是div, span\n\n作用:\n\n​\t\t1.使人更易理解\n\n​\t\t2.SEO 使机器(搜索引擎 爬虫)能够理解\n\n\n\n#### 行级块级元素（块状，内联）\n\ndisplay:block/table\n\n​\t\t有div h1 h2 table ul ol p等\ndisplay: inline/inline-block\n\n​\t\t有 span img input button等\n\n\n\n#### script 标签中 defer 和 async\n\n普通的sript：阻止HTML解析，下载并加载完后才会继续解析HTML\n\ndefer：异步下载，同步加载（HTML加载完后才会加载）\n\nasync：异步下载和加载，可能会阻碍HTML解析\n\n\n\n\n\n## CSS\n\n#### 盒模型宽度计算\n\nwidth+padding\\*2+boder\\*2\n\n使宽度计算方式包括内边距和边框:box-sizing: border-box;\n\n\n\n#### margin\n\n##### 重叠\n\n相邻元素的margin-top和margin-bottom会重叠\n\n空白内容也会发生重叠\n\n##### 负值\n\nmargin-top和margin-left负值，元素向上、向左移动\nmargin-right和margin-bottom负值，右侧元素左移，下方元素上移，**自身不受影响**\n\n\n\n#### BFC\n\nBlock format context ,块级格式化上下文\n\n一块独立渲染区域，内部元素的渲染不会影响边界以外的元素\n\n形成BFC的常见条件\n\t\tfloat不是none\n\t\tposition 是 absolute 或 fixed\n\t\toverflow不是visible\n\t\tdisplay 是 flex inline-block等\n\n\n\n#### float\n\n##### 两栏布局\n\n（左侧固定 + 右侧自适应布局）\n\n现在有以下 DOM 结构：\n\n```html\n<div class=\"outer\">\n  <div class=\"left\">左侧</div>\n  <div class=\"right\">右侧</div>\n</div>\n```\n\n1. 利用浮动，左边元素宽度固定 ，设置向左浮动。将右边元素的 `margin-left` 设为固定宽度 。注意，因为右边元素的 `width` 默认为 `auto` ，所以会自动撑满父元素。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  margin-left: 200px;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 `overflow: hidden;` 这样右边就触发了 `BFC` ，`BFC` 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  overflow: auto;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用 `flex` 布局，左边元素固定宽度，右边的元素设置 `flex: 1` 。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  flex: 1;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用绝对定位，父级元素设为相对定位。左边元素 `absolute` 定位，宽度固定。右边元素的 `margin-left` 的值设为左边元素的宽度值。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  position: absolute;\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  margin-left: 200px;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n1. 利用绝对定位，父级元素设为相对定位。左边元素宽度固定，右边元素 `absolute` 定位， `left` 为宽度大小，其余方向定位为 `0` 。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  height: 100%;\n  background: lightcoral;\n}\n.right {\n  position: absolute;\n  left: 200px;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  background: lightseagreen;\n}\n```\n\n\n\n##### 三栏布局\n\n**圣杯**:\n\n```html\n<header style=\"background-color: rgb(233, 233, 233);\">header</header>\n    <container class=\"container\">\n        <div class=\"center\">center</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </container>\n<footer style=\"background-color: rgb(233, 233, 233);\">footer</footer>\n```\n\n```css\n.container {\n    display: block;\n    padding-left: 200px;\n    padding-right: 300px;\n}\n\n.center {\n    float: left;\n    background-color: bisque;\n    width: 100%;\n}\n\n.left {\n    position: relative;\n    float: left;\n    background-color: aqua;\n    width: 200px;\n    margin-left: -100%;\n    right: 200px;\n}\n\n.right {\n    float: left;\n    background-color: aquamarine;\n    width: 300px;\n    margin-right: -300px;\n}\n\nfooter {\n    clear: both;\n}\n```\n\n**双飞翼**:\n\n```html\n<div id=\"main\">\n    <div id=\"main-wrap\">\n        main\n    </div>\n</div>\n<div id=\"left\">\n    left\n</div>\n<div id=\"right\">\n    right\n</div>\n```\n\n```css\n#main {\n    width: 100%;\n    height: 200px;\n    background-color: greenyellow;\n    float: left;\n}\n\n#main-wrap {\n    margin-left: 200px;\n    margin-right: 250px;\n}\n\n#left {\n    width: 200px;\n    height: 200px;\n    background-color: aqua;\n    float: left;\n    margin-left: -100%;\n}\n\n#right {\n    width: 250px;\n    height: 200px;\n    background-color: lightgreen;\n    float: left;\n    margin-left: -250px;\n}\n```\n\nclear fix:\n\n```\n.clearfix:after {\n\tcontent: '' ;\n\tdisplay:table;\n\tclear:both;\n}\n.clearfix {\n\t*zoom:1;/*兼容IE低版本*/\n}\n```\n\n#### flex\n\nflex-direction 主轴方向\n\njustify-content 主轴对齐方式\n\nalign-items 交叉轴对齐方式\n\nflex-wrap 换行\n\nalign-self 子元素交叉轴对齐\n\n**画个色子**\n\n```html\n<div class=\"box\">\n    <span class=\"item\"></span>\n    <span class=\"item\"></span>\n    <span class=\"item\"></span>\n</div>\n```\n\n```css\n.box {\n    width: 200px;\n    height: 200px;\n    border: 2px solid #ccc;\n    border-radius: 10px;\n    padding: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.item {\n    display: block;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: palevioletred;\n}\n\n.item:nth-child(2) {\n    align-self: center;\n}\n\n.item:nth-child(3) {\n    align-self: flex-end;\n}\n```\n\n\n\n#### position\n\n**absolute和relative分别依据什么定位？**\n\nrelative依据**自身定位**\n\n自身位移并**作为**子元素(如果有)的**定位基准**\n\n\n\nabsolute依据最近一层的**定位元素**定位\n\n定位元素\n\t**absolute** relative fixed\n\tbody(找不到absolute时)\n\n\n\n#### 居中对齐实现方式\n\n水平居中\n\tinline元素：text-align:center\n\tblock元素：margin:auto\n\tabsolute元素：left:50%+**margin-left负值**(必须知道子元素尺寸) -宽度/2\n\n垂直居中\n\tinline元素：line-height的值等于height值\n\tabsolute元素：top:50%+margin-top负值\n\tabsolute元素：transform(-50%,-50%)\n\n​\tabsolute元素：top,left,bottom,right=0+margin:auto\n\n\n\n#### line-height 继承方式:\n\n具体数值，如30px,则继承该值\n比例，如2/1.5,则继承该比例\n**百分比**，如200%,则继承**计算出来的值**\n\n\n\n#### 响应式(rem/vw/vh)\n\npx,绝对长度单位，最常用\nem,相对长度单位，相对于父元素，不常用\n\nroot em rem,相对长度单位，相对于根元素，常用于响应式布局\n\nvh网页视口高度的1/100\nvw网页视口宽度的1/100\nvmax 取两者最大值；vmin取两者最小值\n\n\n\n**响应式布局的常用方案**\n\nmedia-query,根据不同的屏幕宽度设置根元素 font-size\nrem,基于根元素的相对单位\n\n\n\n**网页视口尺寸**\n\nwindow.screen.height//屏幕高度\nwindow.innerHeight//网页视口高度\ndocument.body.clientHeight//body高度\n\n\n\n## JS\n\n### 变量类型和计算\n\n**值类型和引用类型的区别**\n\n引用类型vs值类型\n\n引用：储存内存地址（对象，数组，函数等）\n\n\n\n**typeof 能判断哪些类型**\n\n识别所有值类型\n识别函数\n判断是否是引用类型(object)（不可再细分）\n\n\n\n**变量计算-类型转换**\n\n字符串拼接: 拼接时有字符串则会转换为字符串 如  a = true + 'wdnmd'    //'truewdnmd'\n\n**何时使用===何时使用==**\n\n除==null，用===\n==:  '' == false -> true; 0 == false -> true; null == undifined -> true\n\nif 语句和逻辑运算 : !!(0/NaN/''/null/undefined/false) 为falsely变量，其他为truly\n\n\n\n**深拷贝**\n\nhandle\\1-深拷贝.ts\n\n\n\n### 原型原型链\n\nclass 和继承\n\n类型判断 instanceof\n\n原型和原型链\n\n\n\n**如何准确判断一个变量是不是数组？**\n\nval instanceof Array // true/false\n\n\n\n手写一个简易的jQuery,考虑插件和扩展性\n\nclass jQuery {}\njQuery.prototype.chajian = function(args){}\nclass jjQuery extends jQuery {}\n\n\n\n**class 的原型本质，怎么理解？**\n\n每个class都有显示原型prototype\n每个实例都有隐式原型\\_\\_proto\\_\\_\n实例的\\_\\_proto\\_\\_指向对应class的prototype\n\n\n\n\n\n### 作用域和闭包\n\n**作用域和自由变量**\n\n全局作用域\n函数作用域\n块级作用域（ES6新增）\n\n一个变量在当前作用域没有定义，但被使用了\n向上级作用域，一层一层依次寻找，直至找到为止\n如果到全局作用域都没找到，则报错xx is not defined\n\n\n\n**闭包**\n\n函数中自由变量的查找在函数定义的地方而不是执行的地方\n在函数定义的时候，如果当前作用域有被引用的变量，则会形成闭包\n\n\n\n**this**\n\n取值是在函数执行时确定的，而不是定义时确定的\n作为对象方法执行作用域为上级对象\nsetTimeout的this指向window\n箭头函数this的取值始终为上级作用域\n\n**this 的不同应用场景，如何取值？**\n\n当做普通函数被调用: 执行时作用域\n使用call apply bind: 指定作用域\n作为对象方法调用: 上级对象\n在class的方法中调用: 对象本身\n箭头函数: 上级作用域\n\n\n\n手写 bind 函数\n\nhandle\\2-bind.ts\n\n\n\n实际开发中闭包的应用场景，举例说明\n\n隐藏数据,只提供api\n\n\n\n### 异步\n\n**单线程和异步**\n\nJS是单线程语言，只能同时做一件事儿\n浏览器和 nodejs 已支持JS启动进程，如Web Worker\nJS和DOM渲染共用同一个线程，因为JS可修改DOM结构\n\n\n\n应用场景\n\n网络请求，如ajax图片加载\n定时任务，如 setTimeout\n\n\n\ncallback hell 和 Promise\n\n\n\n同步和异步的区别是什么？\n\n基于JS是单线程语言\n异步不会阻塞代码执行\n同步会阻塞代码执行\n\n\n\n手写用 Promise 加载一张图片\n\npromise.ts\n\n\n\n前端使用异步的场景有哪些？\n\n网络请求，如ajax图片加载\n定时任务，如setTimeout\n\n \n\n#### event loop 事件循环\n\nJS如何执行？\n\n从前到后，一行一行执行\n如果某一行执行报错，则停止下面代码的执行\n先把同步代码执行完，再执行异步\n\n\n\n**event loop**\n\n同步代码，一行一行放在Call Stack执行\n遇到异步，会先“记录”下，等待时机（定时、网络请求等）\n时机到了，就移动到 Callback Queue\n如 Call Stack为空（即同步代码执行完）Event Loop开始工\n轮询查找 Callback Queue,如有则移动到 Call Stack 执行\n然后继续轮询查找（永动机一样）\n\n\n\n**DOM 事件和 event loop**\n\nJS是单线程的\n异步（setTimeout,ajax等）使用回调，基于event loop\nDOM 事件也使用回调，基于 event loop\n\n\n\n#### Promise\n\n**三种状态**\n\npending resolved rejected\npending -> resolved 或 pending -> rejected\n变化不可逆\n\n\n\n**状态的表现和变化**\n\npending状态，不会触发then和catch\nresolved 状态，会触发后续的 then 回调函数\nrejected状态，会触发后续的catch回调函数\n\n\n\n**then 和 catch 对状态的影响**\n\nthen 正常返回 resolved,里面有报错则返回 rejected\ncatch 正常返回 resolved,里面有报错则返回 rejected\n\n\n\n#### async/await\n\n异步回调 callback hell\nPromise then catch 链式调用，但也是基于回调函数\nasync/await是同步语法，彻底消灭回调函数\n\n\n\n**async/await和Promise的关系**\n\n执行**async**函数，**返回**的是**Promise对象** (值封装为Promise对象，Promise直接返回)\nawait 相当于 Promise 的 then\ntry...catch 可捕获异常，代替了 Promise 的 catch\n\n\n\n**for ... of**\n\nfor...in(以及forEach for)是常规的同步遍历\nfor...of 常用于异步的遍历\n\n\n\n#### 宏任务 macroTask和微任务 microTask\n\n**什么是宏任务，什么是微任务**\n\n宏任务：setTimeout,setInterval,Ajax,DOM事件\n微任务：Promise async/await\n微任务执行时机比宏任务要早\n\n\n\n\n**event loop 和 DOM 渲染**\n每次Call Stack清空（即每次轮询结束）,即同步任务执行完\n都是DOM重新渲染的机会，DOM结构如有改变则重新渲染\n然后再去触发下一次 Event Loop\n\n\n\n**微任务和宏任务的区别**\n\n宏任务：DOM渲染后触发，如setTimeout\n微任务：DOM渲染前触发，如Promise\n\n微任务是ES6语法规定的\n宏任务是由浏览器规定的\n\n\n\n宏任务有哪些？微任务有哪些？微任务触发时机更早\n微任务、宏任务和DOM渲染的关系\n微任务、宏任务和DOM渲染，在eventloop的过程\n\n\n\n#### 手写promise\n\n3-promise.ts\n\n\n\n## JS Web API\n\n## DOM\n\nDOM 本质\n\n从HTML解析出来的一棵树\n\n\n\n**DOM 节点操作**\n\n获取DOM节点\n\n```javascript\nconst div1 = document.getElementById('div1')//元素\nconst divList = document.getElementsByTagName('div')//集合\nconst containerList = document.getElementsByClassName('.container')//集合\nconst pList = document.querySelectorAll('p')//集合\n\nconst p = pList[0]\n```\n\n\n\n**property**:修改对象属性，不会体现到html结构中\n\n```javascript\nconsole.log(p.style.width)//获取样式\np.style.width='100px'//修改样式\n\nconsole.log(p.className)//获取class\np.className='p1'//修改 class\n\n//获取 nodeName 和 nodeType\nconsole.log(p.nodeName)\nconsole.log(p.nodeType)\n```\n\n**attribute**:修改html属性，会改变html结构\n\n```javascript\np.setAttribute('data-name','imooc')\no.setAttribute('style','font-size:30px;')\np.getAttribute('data-name')//imooc\np.getAttribute('style')//font-size:30px;\n```\n\n两者都有可能引起DOM重新渲染\n\n\n\n**DOM 结构操作**\n\n新增/插入节点\n\n```javascript\n//新建节点\nconst newP = document.createElement('p')\nnewP.innerHTML='this is newp'\n//插入节点\ndiv1.appendChild(newP)\n\n//移动节点(已在DOM中的节点appendChild不会复制)\nconst oldp = document.getElementById('oldp')\ndiv2.appendChild(oldp)\n```\n\n获取父元素，子元素列表\n\n```javascript\n//获取父元素\nconst divl = document.getElementById('div1')\nconst parent = divl. parentNode\n//获取子元素列表\nconst divl = document.getElementById('divl')\nconst child = div1.childNodes\nconst child=Array.prototype.slice.call(div1.childNodes).filter(child => {\n    if(child.nodeType === 1) return true;\n    return false;\n})\n```\n\n删除子元素\n\n```javascript\ndiv1.removeChild(child[0])\n```\n\n\n\n**DOM 性能**\n\nDOM操作非常“昂贵”，避免频繁的DOM操作\n对DOM查询做**缓存**\n将**频繁**操作改为**一次性**操作\n\n\n\n\n\n## BOM\n\nnavigator\n\n如何识别浏览器的类型\nnavigator.userAgent\n\n\n\nscreen\n\nscreen.width\nscreen.height\n\n\n\nlocation\n\n网址：location.href\n协议：location.protocol\n域名：location.host\n协议+ 域名：location.origin\n路径：location.pathname\n参数：location.search\n锚点：location.hash\n\n\n\nhistory\n\n后退：history.back\n前进：history.forward\n\n\n\n\n\n## 事件\n\n**事件绑定**\n\n```javascript\nconst btn = doucument.getElementById('btn');\nbtn.setEventListener('click',e => {alert('click')})\n\n// console.log(e.target)//获取触发的元素\n// event.preventDefault()//阻止默认行为\n```\n\n### 什么是事件流\n\n事件流描述的就是从页面中接收事件的顺序。而早期的IE和Netscape提出了完全相反的事件流概念，IE事件流是事件冒泡，而Netscape的事件流就是事件捕获。\n\n**事件冒泡**\n\n事件会传递给父元素\n```javascript\n// e.stopPropagation() //阻止冒泡\n```\n\n**事件代理**\n\n代码简洁\n减少浏览器内存占用\n但是，不要滥用\n\n```javascript\ndiv.addEventListener('click', e => {\n    event.preventDefault();\n    const target = event.target\n    if(target.nodeName === 'A'){\n        alert(target.innerHTML)\n    }\n})\n```\n\n\n\n\n\n编写一个通用的**事件监听函数**\n\n```javascript\n// function bindEvent(ele, type, fn){\n//     ele.addEventListener(type,fn)\n// }\n\nfunction bindEvent(ele, type, selector, fn){\n    if(!fn){\n        fn = selector\n        selector = null\n    }\n    ele.addEventListener(type,e => {\n\t\tconst target = e.target\n        if(selector){\n            if(target.matches(selector)){\n                fn.call(target, e)\n            }\n        } else {\n            fn.call(target, e)\n        }\n    })\n}\n\n//普通绑定\nbindEvent(btn, 'click', function(e) {\n    e.preventDefault();\n    alert(this.innerHTML)\n})\n//代理绑定\nbindEvent(div, 'click', 'a', function(e) {\n    e.preventDefault();\n    alert(this.innerHTML)\n})\n```\n\n\n\n描述事件冒泡的流程\n\n基于DOM树形结构\n事件会顺着触发元素往上冒泡\n应用场景：代理\n\n\n\n无限下拉的图片列表，如何监听每个图片的点击？\n\n事件代理\n用 e.target获取触发元素\n用matches来判断是否是触发元素\n\n\n\n## ajax\n\nXMLHttpRequest\n\nxhr.readyState\n0-UNSET尚未调用open方法\n1-OPENED open方法已被调用\n2-HEADERS_RECEIVED send方法已被调用，header已被接收\n3-LOADING 下载中，responseText已有部分内容\n4-DONE 下载完成\n\n\n\n状态码\n\nxhr.status\n·2xx - 表示成功处理请求，如200\n·3xx - 需要重定向，浏览器直接跳转，如301 302 304\n·4xx - 客户端请求错误，如404 403\n·5xx - 服务器端错误\n\n\n\n手写一个简易的 ajax\n\n```javascript\nfunction ajax(url: string) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true)\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseText)\n                } else if (xhr.status === 404) {\n                    reject(new Error('404NotFound'))\n                }\n            }\n        }\n        xhr.send(null)\n    })\n\n}\n```\n\n\n\n跨域：同源策略，跨域解决方案\n\n什么是跨域（同源策略）\n\najax请求时，浏览器要求当前网页和server必须同源（安全）\n同源：**协议、域名、端口，三者必须一致**\n前端：http://a.com:8080/  server:https://b.com/api/xxx\n\n\n\n**\\<img/>**可用于统计打点，可使用第三方统计服务\n**\\<link/>\\<script>**可使用CDN,CDN一般都是外域\n**\\<script>**可实现JSONP\n\n\n\n所有的跨域，都必须经过 server 端允许和配合\n未经server端允许就实现跨域，说明浏览器有漏洞，危险信号\n\n\n\n\n\n**JSONP**\n\n服务器可以返回任何内容**\\<script>可绕过跨域限制**\n**服务器**可以任意**动态拼接数据返回**\n所以，\\<script>就可以获得跨域的数据，只要服务端愿意返回\n\n\n\n**CORS**(服务端支持)\n\n\n\n常见方式：\n\n1. jsop\nhtml中的script src属性获取其他源的数据\n\\<script>\nfunction getData(res){\nconsole.Log(res)\n\\</script>\n\\<script src=\"http://www.baidu.com/news?callback=getData\">\n\n2.cors跨域资源共享支持所有的主流浏览器ie9+\nXMLHttpRequest发送请求的时候，如果不同源，heaters{Origin}\n后台处理：Access-control-allow-origin:\n\n3.h5 window.postMessage跨域 主流浏览器 ie8+\nwindow.postMessage(\"字符串\",\"*\")\n\n注意：vue中跨域：:代理proxy··本质上·cors跨域\nvue.config.js.\nproxy:{\ntarget:\nchangeorigin:\npathRewrite:\n\n\n\n## 存储\n\n**cookie**\n\n本身用于浏览器和 server 通讯\n被“借用”到本地存储来\n可用 document.cookie = ... 来修改\n\ncookie 的**缺点**\n\n存储大小，最大**4KB**\nhttp请求时**需要发送到服务端**，增加请求数据量\n只能用 document.cookie = …来修改，太过简陋\n\n\n\n**localStorage 和 sessionStorage**\n\nHTML5专门为存储而设计，最大可存**5M**\nAPI简单易用 **setItem getItem**\n不会随着http请求被发送出去\n\nlocalStorage 数据会**永久存储**，除非代码或手动删除\nsessionStorage 数据只存在于**当前会话**，浏览器关闭则清空\n一般用localStorage会更多一些\n\n\n\n描述cookie localStorage sessionStorage 区别\n\n容量\nAPI易用性\n是否跟随http请求发送出去\n\n\n\n## HTTP\n\n前端工程师开发界面\n需要调用后端的接口，提交/获取数据——http协议\n要求事先掌握好ajax\n\n\n\n### http 状态码\n\n**状态码分类**\n\n1xx服务器收到请求\n2xx请求成功，如200\n3xx重定向，如302\n4xx客户端错误，如404\n5xx服务端错误，如500\n\n\n\n**常见状态码**\n\n200成功\n201请求成功并创建新资源  POST/PUT 请求\n204满足请求 不需要刷新表单或页面 表单或者删除\n301永久重定向（配合location,浏览器自动处理\n302临时重定向（配合location,浏览器自动处理）\n304资源未被修改 浏览器缓存\n400服务器由于客户端错误而无法理解和处理请求\n401当需要身份验证但失败或未提供身份验证\n403没有权限\n404资源未找到\n409同时更新或版本相互冲突\n410请求的资源不再可用\n500服务端错误\n504网关超时\n\n\n\n\n关于协议和规范\n\n就是一个约定\n要求大家都跟着执行\n不要违反规范，例如IE浏览器\n\n\n\n### http methods\n\n传统的methods\n\nget获取服务器的数据\npost像服务器提交数据\n简单的网页功能，就这两个操作\n\n\n\n现在的methods\n\nget 获取数据\npost 新建数据\npatch/put更新数据\ndelete删除数据\n\n\n\n**Restful API**\n\n一种新的API设计方法（早已推广使用）\n传统API设计：把每个url当做一个**功能**\nRestful API设计：把每个url当做一个**唯一的资源**\n\n如何设计成一个资源？\n\n不用url参数\n\n传统API设计：/api/list?pageIndex=2\nRestful API设计：/api/list/2\n\n\n\n用**method**表示**操作类型**\n\n传统API设计\n\npost请求/api/create-blog\npost请求/api/update-blog?id=100\nget请求/api/get-blog?id=100\n\nRestful API设计\n\npost请求/api/blog\npatch 请求 /api/blog/100\nget 请求 /api/blog/100\n\n\n\n**http headers**\n常见的 **Request** Headers\n\nAccept 浏览器可接收的数据格式\nAccept-Encoding浏览器可接收的压缩算法，如gzip\nAccept-Languange 浏览器可接收的语言，如 zh-CN\nConnection:keep-alive一次TCP连接重复使用\ncookie\nHost\nUser-Agent(简称UA)浏览器信息\nContent-type 发送数据的格式，如 application/json\n\n\n\n\n常见的 **Response** Headers\n\nContent-type 返回数据的格式，如 application/json\nContent-length 返回数据的大小，多少字节\nContent-Encoding 返回数据的压缩算法，如 gzip\nSet-Cookie\n\n\n\n**缓存**相关的headers\n\nCache-Control Expires\nLast-Modified If-Modified-Since\nIf-None-Match\nEtag\n\n\n\n### http缓存\n\n什么是缓存？\n为什么需要缓存？\n哪些资源可以被缓存？一静态资源（js css img)\n\n\n\n#### 强缓存与协商缓存\n\n**强缓存**：\n\n​\t\t如果没有过期，浏览器可以直接使用该缓存而不需要重新向服务器请求\n\n​\t\tExpires 存在于响应头，为缓存过期时间点\n\n​\t\tCache-Control 存在于响应头和请求头，为缓存过期时常\n\n\n\n**Cache-Control**\n\nResponse Headers 中\n控制强制缓存的逻辑\n例如 Cache-Control:max-age=31536000(单位是秒）\n\n**max-age** 过期时长\n**no-cache** 不用强制缓存\nno-store 不用任何缓存\n\nprivate 只允许最终用户缓存\npublic 允许路由/代理缓存\n\n\n\nExpires\n\n同在 Response Headers 中\n同为控制缓存过期\n已被 Cache-Control 代替\n\n\n\n**协商缓存**：\n\n​\t\t不能直接使用该缓存，始终向服务器询问是否需要更新\n\n\n\n服务器端缓存策略\n服务器判断客户端资源，是否和服务端资源一样\n一致则返回304,否则返回200和最新的资源\n\n\n\n在Response Headers中，有两种\n\n**Last-Modified** 资源的最后修改时间\n**Etag** 资源的唯一标识（一个字符串，类似人类的指纹）\n\n\n\n\n### 版本\n\nHTTP/0.9\n\n-  只有一个命令GET\n-  响应类型: 仅超文本\n-  没有header等描述数据的信息\n-  服务器发送完毕，就关闭TCP连接\n\nHTTP/1.0\n\n-  增加了很多命令（post HESD ）\n-  增加`status code` 和 `header`\n-  多字符集支持、多部分发送、权限、缓存等\n-  响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)\n\nHTTP/1.1\n\n-  持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）\n-  支持的方法: `GET` , `HEAD` , `POST` , `PUT` ,`DELETE` , `TRACE` , `OPTIONS`\n-  进行了重大的性能优化和特性增强，分块传输、压缩/解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽\n\nHTTP2\n\n-  所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮\n-  同一个连接里面发送多个请求不再需要按照顺序来\n-  头信息压缩以及推送等提高效率的功能\n\nHTTP3\n\n-  QUIC“快速UDP互联网连接”（Quick UDP Internet Connections）\n\nHTTP3 的主要改进在传输层上。传输层不会再有我前面提到的那些繁重的 TCP 连接了。现在，一切都会走 UDP。\n\n\n\n### HSTS\n\nHTTP Strict Transport Security，简单说就是强制客户端使用 HTTPS 访问页面\n\n原理：\n\n- 在服务器响应头中添加 `Strict-Transport-Security`，可以设置 `max-age`\n- 用户访问时，服务器种下这个头\n- 下次如果使用 http 访问，只要 max-age 未过期，客户端会进行内部跳转，可以看到 307 Redirect Internel 的响应码\n- 变成 https 访问源服务器\n\n\n\n### HTTP协议特点\n\n1. 支持客户/服务器模式。\n2. 简单快速客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。\n3. 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。\n4. 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n5. 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n\n\n\n### TCP\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP/IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层\n\n#### 连接三次握手\n\n第一次握手：主机A发送位码为`SYN＝1`，随机产生`Seq  number=1234567`的数据包到服务器，主机B由`SYN=1`知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）\n\n第二次握手：主机B收到请求后要确认联机信息，向A发送`ack number=(主机A的seq+1)`，`SUN=1，ACK=1234567 + 1`，随机产生`Seq=7654321`的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）\n\n第三次握手：主机A收到后检查`ack number`是否正确，即第一次发送的`seq number+1`，以及位码`SYN`是否为1，若正确，主机A会再发送`ack number=(主机B的seq+1)`，`ack=7654321 + 1`，主机B收到后确认`Seq`值与`ACK=7654321+ 1`则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）\n\n#### 断开四次分手\n\n刚开始双方都处于established状态，假如是客户端先发起关闭请求\n\n第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态\n\n第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态\n\n第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送FIN报文，且指定一个序列号。此时服务端处于LAST_ACK的状态\n\n需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态，服务端收到ACK报文之后，就处于关闭连接了，处于CLOSED状态。\n\n\n\n\n\n## 开发环境\n\ngit\n\n常用git命令\n\ngit add .    添加\ngit checkout xxx     还原\ngit commit - m \" xxx \"    提交\ngit push origin master    推送\ngit pull origin master    拉去\ngit branch    分支\ngit checkout -b xxx  新建分支 / git checkout XXX    切换分支\ngit merge xxx    合并分支\ngit stash   暂存   git stash pop   恢复暂存\n\n\n\n抓包\n\n移动端h5页，查看网络请求，需要用工具抓包\nwindows 一般用 fiddler\nMac OS 一般用 charles\n\n\n\nwebpack babel\n\nES6模块化，浏览器暂不支持\nES6语法，浏览器并不完全支持\n压缩代码，整合代码，以让网页加载更快\n\n\n\n\n\n## 运行环境\n\n运行环境即浏览器（server端有nodejs)\n下载网页代码，渲染出页面，期间会执行若干JS\n要保证代码在浏览器中：稳定且高效\n\n\n\n### 网页加载过程\n\n加载资源的**形式**\n\nhtml代码\n媒体文件，如图片、视频等\njavascript css\n\n**加载过程**\n\nDNS解析：域名-&gt;IP地址\n浏览器根据IP地址向服务器发起http请求\n服务器处理http请求，并返回给浏览器\n\n**渲染**过程\n\n根据HTML代码生成DOM Tree\n根据CSS代码生成CSSOM\n将DOM Tree和CSSOM整合行程Render Tree\n根据Render Tree 渲染页面\n遇到\\<script>则暂停渲染，优先加载并执行JS代码，完成再继续\n直至把 Render Tree 渲染完成\n\n#### 页面渲染\n\nHTML生成**DOM**树，CSS生成**对象模型**(**CSSDOM**)\n\nDOM树与CSSDOM合并生成**渲染树**\n\n浏览器根据渲染树计算后生成**布局树**Layout Tree\n\n最后将画面绘制到屏幕上\n\n\n\n**window.onload 和 DOMContentLoaded 区别**\n\nwindow.onload资源全部加载完才能执行，包括图片\nDOMContentLoaded DOM 渲染完成即可，图片可能尚未下载\n\n\n\n#### 性能优化\n\n是一个综合性问题，没有标准答案，但要求尽量全面\n某些细节问题可能会单独提问：手写防抖、节流\n\n\n\n**性能优化原则**\n\n多使用内存、缓存或其他方法\n减少CPU计算量，减少网络加载耗时\n(适用于所有编程的性能优化——空间换时间）\n\n**让加载更快**\n减少资源体积：压缩代码\n减少访问次数：合并代码，SSR服务器端渲染，缓存\n使用更快的网络：CDN\n\n**缓存**\n静态资源加 hash 后缀，根据文件内容计算 hash\n文件内容不变，则hash不变，则url不变\nurl和文件不变，则会自动触发http缓存机制，返回304\n\n**SSR**\n服务器端渲染：将网页和数据一起加载，一起渲染\n非SSR(前后端分离）:先加载网页，再加载数据，再渲染数据\n早先的JSP ASP PHP,现在的vue React SSR\n\n\n\n**让渲染更快**\nCSS 放在 head ,JS 放在 body 最下面\n尽早开始执行JS,用DOMContentLoaded触发\n懒加载（图片懒加载，上滑加载更多）\n对DOM查询进行缓存\n频繁DOM操作，合并到一起插入DOM结构\n**节流 throttle** **防抖 debounce**\n\n```javascript\nconst p = document.getElementsByTagName('p');\n```\n\n\n\n**防抖 debounce**\n\n监听一个输入框的，文字变化后触发change事件\n直接用keyup事件，则会频发触发change事件\n防抖：用户输入结束或暂停时，才会触发change事件\n\n```javascript\nconst debounce = (fn: Function, delay: number = 500): EventListener => {\n    let timer: NodeJS.Timeout;\n    return function () {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            //@ts-ignore\n            fn.apply(this, arguments);\n        }, delay)\n    }\n}\n\np[0].addEventListener('click', debounce(function () {\n    console.log(p[0]);\n}, 600))\n```\n\n\n\n**节流 throttle**\n\n拖拽一个元素时，要随时拿到该元素被拖拽的位置\n直接用drag事件，则会频发触发，很容易导致卡顿\n节流：无论拖拽速度多快，都会每隔100ms触发一次\n\n```javascript\nconst throttle = (fn: Function, delay: number = 100): EventListener => {\n    let timer: NodeJS.Timeout | null = null;\n    return function () {\n        if (timer) return;\n        timer = setTimeout(() => {\n            //@ts-ignore\n            fn.apply(this, arguments);\n            timer = null;\n        }, delay)\n    }\n}\n\n\np[0].addEventListener('drag', throttle(\n    function (e: any) {\n        console.log(e.offsetX, e.offsetY)\n    }, 500)\n);\n```\n\n\n\n\n\n### 浏览器\n\n#### URL\n\n协议://主(ex.com)机:端口/路(a/b)径 ?查询(k=v&k=v)参数#锚点\n\n\n\n#### DNS\n\n从域名获取IP地址\n\n根域名服务器，顶级域名服务器，主域名服务器\n\n递归查询\n\n​\t\t客户端只发一次请求，要求对方给出最终结果。\n\n​\t\t浏览器缓存，系统缓存，路由器缓存，ISP(运营商)DNS缓存：统称为DNS高速缓存\n\n​\t\t若当前DNS服务器没有，则服务器会继续向其他DNS服务器查询\n\n迭代查询\n\n​\t\t客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表，客户端会再向返回的列表中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。\n\n​\t\t当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。\n\n\n\n### 安全\n\n**XSS跨站请求攻击**\n\n一个博客网站，我发表一篇博客，其中嵌入\\<script>脚本\n脚本内容：获取cookie,发送到我的服务器（服务器配合跨域）\n发布这篇博客，有人查看它，窃取访问者的cookie\n\n**XSS 预防**(xss 工具)\n\n替换特殊字符，如&lt;变为&lt;&gt;变为&gt;\n\\<script>变为 \\&lt;script\\&gt;,直接显示，而不会作为脚本执行\n前端要替换，后端也要替换，都做总不会有错\n\n\n\n**XSRF跨站请求伪造**\n\n你正在购物，看中了某个商品，商品id是100\n付费接口是xxx\\.com/pay?id=100,但没有任何验证\n我是攻击者，我看中了一个商品，id是200\n我向你发送一封电子邮件，邮件标题很吸引人\n但邮件正文隐藏着&lt;img src=xxx\\.com/pay?id=200/&gt;\n你一查看邮件，就帮我购买了id是200的商品\n\n**XSRF 预防**\n\n使用post接口\n增加验证，例如密码、短信验证码、指纹等","slug":"面经笔记","published":1,"updated":"2023-01-31T06:52:09.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldmuenbt00019ie699uk741y","content":"<p><strong>之前准备面试做的笔记，从三件套到浏览器，应该算是比较全面的基础前端<del>八股文</del>知识整理</strong></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h4 id=\"HTML-语义化\"><a href=\"#HTML-语义化\" class=\"headerlink\" title=\"HTML 语义化\"></a>HTML 语义化</h4><p>使用语义化标签而不是div, span</p>\n<p>作用:</p>\n<p>​\t\t1.使人更易理解</p>\n<p>​\t\t2.SEO 使机器(搜索引擎 爬虫)能够理解</p>\n<h4 id=\"行级块级元素（块状，内联）\"><a href=\"#行级块级元素（块状，内联）\" class=\"headerlink\" title=\"行级块级元素（块状，内联）\"></a>行级块级元素（块状，内联）</h4><p>display:block&#x2F;table</p>\n<p>​\t\t有div h1 h2 table ul ol p等<br>display: inline&#x2F;inline-block</p>\n<p>​\t\t有 span img input button等</p>\n<h4 id=\"script-标签中-defer-和-async\"><a href=\"#script-标签中-defer-和-async\" class=\"headerlink\" title=\"script 标签中 defer 和 async\"></a>script 标签中 defer 和 async</h4><p>普通的sript：阻止HTML解析，下载并加载完后才会继续解析HTML</p>\n<p>defer：异步下载，同步加载（HTML加载完后才会加载）</p>\n<p>async：异步下载和加载，可能会阻碍HTML解析</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h4 id=\"盒模型宽度计算\"><a href=\"#盒模型宽度计算\" class=\"headerlink\" title=\"盒模型宽度计算\"></a>盒模型宽度计算</h4><p>width+padding*2+boder*2</p>\n<p>使宽度计算方式包括内边距和边框:box-sizing: border-box;</p>\n<h4 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h4><h5 id=\"重叠\"><a href=\"#重叠\" class=\"headerlink\" title=\"重叠\"></a>重叠</h5><p>相邻元素的margin-top和margin-bottom会重叠</p>\n<p>空白内容也会发生重叠</p>\n<h5 id=\"负值\"><a href=\"#负值\" class=\"headerlink\" title=\"负值\"></a>负值</h5><p>margin-top和margin-left负值，元素向上、向左移动<br>margin-right和margin-bottom负值，右侧元素左移，下方元素上移，<strong>自身不受影响</strong></p>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><p>Block format context ,块级格式化上下文</p>\n<p>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</p>\n<p>形成BFC的常见条件<br>        float不是none<br>        position 是 absolute 或 fixed<br>        overflow不是visible<br>        display 是 flex inline-block等</p>\n<h4 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h4><h5 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h5><p>（左侧固定 + 右侧自适应布局）</p>\n<p>现在有以下 DOM 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>左侧<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>右侧<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用浮动，左边元素宽度固定 ，设置向左浮动。将右边元素的 <code>margin-left</code> 设为固定宽度 。注意，因为右边元素的 <code>width</code> 默认为 <code>auto</code> ，所以会自动撑满父元素。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 <code>overflow: hidden;</code> 这样右边就触发了 <code>BFC</code> ，<code>BFC</code> 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用 <code>flex</code> 布局，左边元素固定宽度，右边的元素设置 <code>flex: 1</code> 。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用绝对定位，父级元素设为相对定位。左边元素 <code>absolute</code> 定位，宽度固定。右边元素的 <code>margin-left</code> 的值设为左边元素的宽度值。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用绝对定位，父级元素设为相对定位。左边元素宽度固定，右边元素 <code>absolute</code> 定位， <code>left</code> 为宽度大小，其余方向定位为 <code>0</code> 。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h5><p><strong>圣杯</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: rgb(233, 233, 233);&quot;</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">container</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: rgb(233, 233, 233);&quot;</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bisque;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: -<span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双飞翼</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">        main</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    left</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">    right</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: greenyellow;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>clear fix:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">\tcontent: &#x27;&#x27; ;</span><br><span class=\"line\">\tdisplay:table;</span><br><span class=\"line\">\tclear:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">\t*zoom:1;/*兼容IE低版本*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><p>flex-direction 主轴方向</p>\n<p>justify-content 主轴对齐方式</p>\n<p>align-items 交叉轴对齐方式</p>\n<p>flex-wrap 换行</p>\n<p>align-self 子元素交叉轴对齐</p>\n<p><strong>画个色子</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: palevioletred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h4><p><strong>absolute和relative分别依据什么定位？</strong></p>\n<p>relative依据<strong>自身定位</strong></p>\n<p>自身位移并<strong>作为</strong>子元素(如果有)的<strong>定位基准</strong></p>\n<p>absolute依据最近一层的<strong>定位元素</strong>定位</p>\n<p>定位元素<br>    <strong>absolute</strong> relative fixed<br>    body(找不到absolute时)</p>\n<h4 id=\"居中对齐实现方式\"><a href=\"#居中对齐实现方式\" class=\"headerlink\" title=\"居中对齐实现方式\"></a>居中对齐实现方式</h4><p>水平居中<br>    inline元素：text-align:center<br>    block元素：margin:auto<br>    absolute元素：left:50%+<strong>margin-left负值</strong>(必须知道子元素尺寸) -宽度&#x2F;2</p>\n<p>垂直居中<br>    inline元素：line-height的值等于height值<br>    absolute元素：top:50%+margin-top负值<br>    absolute元素：transform(-50%,-50%)</p>\n<p>​\tabsolute元素：top,left,bottom,right&#x3D;0+margin:auto</p>\n<h4 id=\"line-height-继承方式\"><a href=\"#line-height-继承方式\" class=\"headerlink\" title=\"line-height 继承方式:\"></a>line-height 继承方式:</h4><p>具体数值，如30px,则继承该值<br>比例，如2&#x2F;1.5,则继承该比例<br><strong>百分比</strong>，如200%,则继承<strong>计算出来的值</strong></p>\n<h4 id=\"响应式-rem-x2F-vw-x2F-vh\"><a href=\"#响应式-rem-x2F-vw-x2F-vh\" class=\"headerlink\" title=\"响应式(rem&#x2F;vw&#x2F;vh)\"></a>响应式(rem&#x2F;vw&#x2F;vh)</h4><p>px,绝对长度单位，最常用<br>em,相对长度单位，相对于父元素，不常用</p>\n<p>root em rem,相对长度单位，相对于根元素，常用于响应式布局</p>\n<p>vh网页视口高度的1&#x2F;100<br>vw网页视口宽度的1&#x2F;100<br>vmax 取两者最大值；vmin取两者最小值</p>\n<p><strong>响应式布局的常用方案</strong></p>\n<p>media-query,根据不同的屏幕宽度设置根元素 font-size<br>rem,基于根元素的相对单位</p>\n<p><strong>网页视口尺寸</strong></p>\n<p>window.screen.height&#x2F;&#x2F;屏幕高度<br>window.innerHeight&#x2F;&#x2F;网页视口高度<br>document.body.clientHeight&#x2F;&#x2F;body高度</p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"变量类型和计算\"><a href=\"#变量类型和计算\" class=\"headerlink\" title=\"变量类型和计算\"></a>变量类型和计算</h3><p><strong>值类型和引用类型的区别</strong></p>\n<p>引用类型vs值类型</p>\n<p>引用：储存内存地址（对象，数组，函数等）</p>\n<p><strong>typeof 能判断哪些类型</strong></p>\n<p>识别所有值类型<br>识别函数<br>判断是否是引用类型(object)（不可再细分）</p>\n<p><strong>变量计算-类型转换</strong></p>\n<p>字符串拼接: 拼接时有字符串则会转换为字符串 如  a &#x3D; true + ‘wdnmd’    &#x2F;&#x2F;‘truewdnmd’</p>\n<p><strong>何时使用&#x3D;&#x3D;&#x3D;何时使用&#x3D;&#x3D;</strong></p>\n<p>除&#x3D;&#x3D;null，用&#x3D;&#x3D;&#x3D;<br>&#x3D;&#x3D;:  ‘’ &#x3D;&#x3D; false -&gt; true; 0 &#x3D;&#x3D; false -&gt; true; null &#x3D;&#x3D; undifined -&gt; true</p>\n<p>if 语句和逻辑运算 : !!(0&#x2F;NaN&#x2F;‘’&#x2F;null&#x2F;undefined&#x2F;false) 为falsely变量，其他为truly</p>\n<p><strong>深拷贝</strong></p>\n<p>handle\\1-深拷贝.ts</p>\n<h3 id=\"原型原型链\"><a href=\"#原型原型链\" class=\"headerlink\" title=\"原型原型链\"></a>原型原型链</h3><p>class 和继承</p>\n<p>类型判断 instanceof</p>\n<p>原型和原型链</p>\n<p><strong>如何准确判断一个变量是不是数组？</strong></p>\n<p>val instanceof Array &#x2F;&#x2F; true&#x2F;false</p>\n<p>手写一个简易的jQuery,考虑插件和扩展性</p>\n<p>class jQuery {}<br>jQuery.prototype.chajian &#x3D; function(args){}<br>class jjQuery extends jQuery {}</p>\n<p><strong>class 的原型本质，怎么理解？</strong></p>\n<p>每个class都有显示原型prototype<br>每个实例都有隐式原型__proto__<br>实例的__proto__指向对应class的prototype</p>\n<h3 id=\"作用域和闭包\"><a href=\"#作用域和闭包\" class=\"headerlink\" title=\"作用域和闭包\"></a>作用域和闭包</h3><p><strong>作用域和自由变量</strong></p>\n<p>全局作用域<br>函数作用域<br>块级作用域（ES6新增）</p>\n<p>一个变量在当前作用域没有定义，但被使用了<br>向上级作用域，一层一层依次寻找，直至找到为止<br>如果到全局作用域都没找到，则报错xx is not defined</p>\n<p><strong>闭包</strong></p>\n<p>函数中自由变量的查找在函数定义的地方而不是执行的地方<br>在函数定义的时候，如果当前作用域有被引用的变量，则会形成闭包</p>\n<p><strong>this</strong></p>\n<p>取值是在函数执行时确定的，而不是定义时确定的<br>作为对象方法执行作用域为上级对象<br>setTimeout的this指向window<br>箭头函数this的取值始终为上级作用域</p>\n<p><strong>this 的不同应用场景，如何取值？</strong></p>\n<p>当做普通函数被调用: 执行时作用域<br>使用call apply bind: 指定作用域<br>作为对象方法调用: 上级对象<br>在class的方法中调用: 对象本身<br>箭头函数: 上级作用域</p>\n<p>手写 bind 函数</p>\n<p>handle\\2-bind.ts</p>\n<p>实际开发中闭包的应用场景，举例说明</p>\n<p>隐藏数据,只提供api</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p><strong>单线程和异步</strong></p>\n<p>JS是单线程语言，只能同时做一件事儿<br>浏览器和 nodejs 已支持JS启动进程，如Web Worker<br>JS和DOM渲染共用同一个线程，因为JS可修改DOM结构</p>\n<p>应用场景</p>\n<p>网络请求，如ajax图片加载<br>定时任务，如 setTimeout</p>\n<p>callback hell 和 Promise</p>\n<p>同步和异步的区别是什么？</p>\n<p>基于JS是单线程语言<br>异步不会阻塞代码执行<br>同步会阻塞代码执行</p>\n<p>手写用 Promise 加载一张图片</p>\n<p>promise.ts</p>\n<p>前端使用异步的场景有哪些？</p>\n<p>网络请求，如ajax图片加载<br>定时任务，如setTimeout</p>\n<h4 id=\"event-loop-事件循环\"><a href=\"#event-loop-事件循环\" class=\"headerlink\" title=\"event loop 事件循环\"></a>event loop 事件循环</h4><p>JS如何执行？</p>\n<p>从前到后，一行一行执行<br>如果某一行执行报错，则停止下面代码的执行<br>先把同步代码执行完，再执行异步</p>\n<p><strong>event loop</strong></p>\n<p>同步代码，一行一行放在Call Stack执行<br>遇到异步，会先“记录”下，等待时机（定时、网络请求等）<br>时机到了，就移动到 Callback Queue<br>如 Call Stack为空（即同步代码执行完）Event Loop开始工<br>轮询查找 Callback Queue,如有则移动到 Call Stack 执行<br>然后继续轮询查找（永动机一样）</p>\n<p><strong>DOM 事件和 event loop</strong></p>\n<p>JS是单线程的<br>异步（setTimeout,ajax等）使用回调，基于event loop<br>DOM 事件也使用回调，基于 event loop</p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p><strong>三种状态</strong></p>\n<p>pending resolved rejected<br>pending -&gt; resolved 或 pending -&gt; rejected<br>变化不可逆</p>\n<p><strong>状态的表现和变化</strong></p>\n<p>pending状态，不会触发then和catch<br>resolved 状态，会触发后续的 then 回调函数<br>rejected状态，会触发后续的catch回调函数</p>\n<p><strong>then 和 catch 对状态的影响</strong></p>\n<p>then 正常返回 resolved,里面有报错则返回 rejected<br>catch 正常返回 resolved,里面有报错则返回 rejected</p>\n<h4 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h4><p>异步回调 callback hell<br>Promise then catch 链式调用，但也是基于回调函数<br>async&#x2F;await是同步语法，彻底消灭回调函数</p>\n<p><strong>async&#x2F;await和Promise的关系</strong></p>\n<p>执行<strong>async</strong>函数，<strong>返回</strong>的是<strong>Promise对象</strong> (值封装为Promise对象，Promise直接返回)<br>await 相当于 Promise 的 then<br>try…catch 可捕获异常，代替了 Promise 的 catch</p>\n<p><strong>for … of</strong></p>\n<p>for…in(以及forEach for)是常规的同步遍历<br>for…of 常用于异步的遍历</p>\n<h4 id=\"宏任务-macroTask和微任务-microTask\"><a href=\"#宏任务-macroTask和微任务-microTask\" class=\"headerlink\" title=\"宏任务 macroTask和微任务 microTask\"></a>宏任务 macroTask和微任务 microTask</h4><p><strong>什么是宏任务，什么是微任务</strong></p>\n<p>宏任务：setTimeout,setInterval,Ajax,DOM事件<br>微任务：Promise async&#x2F;await<br>微任务执行时机比宏任务要早</p>\n<p><strong>event loop 和 DOM 渲染</strong><br>每次Call Stack清空（即每次轮询结束）,即同步任务执行完<br>都是DOM重新渲染的机会，DOM结构如有改变则重新渲染<br>然后再去触发下一次 Event Loop</p>\n<p><strong>微任务和宏任务的区别</strong></p>\n<p>宏任务：DOM渲染后触发，如setTimeout<br>微任务：DOM渲染前触发，如Promise</p>\n<p>微任务是ES6语法规定的<br>宏任务是由浏览器规定的</p>\n<p>宏任务有哪些？微任务有哪些？微任务触发时机更早<br>微任务、宏任务和DOM渲染的关系<br>微任务、宏任务和DOM渲染，在eventloop的过程</p>\n<h4 id=\"手写promise\"><a href=\"#手写promise\" class=\"headerlink\" title=\"手写promise\"></a>手写promise</h4><p>3-promise.ts</p>\n<h2 id=\"JS-Web-API\"><a href=\"#JS-Web-API\" class=\"headerlink\" title=\"JS Web API\"></a>JS Web API</h2><h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p>DOM 本质</p>\n<p>从HTML解析出来的一棵树</p>\n<p><strong>DOM 节点操作</strong></p>\n<p>获取DOM节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> div1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)<span class=\"comment\">//元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> containerList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;.container&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;p&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = pList[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>property</strong>:修改对象属性，不会体现到html结构中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">style</span>.<span class=\"property\">width</span>)<span class=\"comment\">//获取样式</span></span><br><span class=\"line\">p.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"string\">&#x27;100px&#x27;</span><span class=\"comment\">//修改样式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">className</span>)<span class=\"comment\">//获取class</span></span><br><span class=\"line\">p.<span class=\"property\">className</span>=<span class=\"string\">&#x27;p1&#x27;</span><span class=\"comment\">//修改 class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取 nodeName 和 nodeType</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">nodeName</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">nodeType</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>attribute</strong>:修改html属性，会改变html结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-name&#x27;</span>,<span class=\"string\">&#x27;imooc&#x27;</span>)</span><br><span class=\"line\">o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;style&#x27;</span>,<span class=\"string\">&#x27;font-size:30px;&#x27;</span>)</span><br><span class=\"line\">p.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-name&#x27;</span>)<span class=\"comment\">//imooc</span></span><br><span class=\"line\">p.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;style&#x27;</span>)<span class=\"comment\">//font-size:30px;</span></span><br></pre></td></tr></table></figure>\n\n<p>两者都有可能引起DOM重新渲染</p>\n<p><strong>DOM 结构操作</strong></p>\n<p>新增&#x2F;插入节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newP = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>)</span><br><span class=\"line\">newP.<span class=\"property\">innerHTML</span>=<span class=\"string\">&#x27;this is newp&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\">div1.<span class=\"title function_\">appendChild</span>(newP)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动节点(已在DOM中的节点appendChild不会复制)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;oldp&#x27;</span>)</span><br><span class=\"line\">div2.<span class=\"title function_\">appendChild</span>(oldp)</span><br></pre></td></tr></table></figure>\n\n<p>获取父元素，子元素列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取父元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = divl. parentNode</span><br><span class=\"line\"><span class=\"comment\">//获取子元素列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;divl&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = div1.<span class=\"property\">childNodes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> child=<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(div1.<span class=\"property\">childNodes</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(child.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除子元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div1.<span class=\"title function_\">removeChild</span>(child[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>DOM 性能</strong></p>\n<p>DOM操作非常“昂贵”，避免频繁的DOM操作<br>对DOM查询做<strong>缓存</strong><br>将<strong>频繁</strong>操作改为<strong>一次性</strong>操作</p>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><p>navigator</p>\n<p>如何识别浏览器的类型<br>navigator.userAgent</p>\n<p>screen</p>\n<p>screen.width<br>screen.height</p>\n<p>location</p>\n<p>网址：location.href<br>协议：location.protocol<br>域名：location.host<br>协议+ 域名：location.origin<br>路径：location.pathname<br>参数：location.search<br>锚点：location.hash</p>\n<p>history</p>\n<p>后退：history.back<br>前进：history.forward</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p><strong>事件绑定</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = doucument.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">setEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;click&#x27;</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(e.target)//获取触发的元素</span></span><br><span class=\"line\"><span class=\"comment\">// event.preventDefault()//阻止默认行为</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是事件流\"><a href=\"#什么是事件流\" class=\"headerlink\" title=\"什么是事件流\"></a>什么是事件流</h3><p>事件流描述的就是从页面中接收事件的顺序。而早期的IE和Netscape提出了完全相反的事件流概念，IE事件流是事件冒泡，而Netscape的事件流就是事件捕获。</p>\n<p><strong>事件冒泡</strong></p>\n<p>事件会传递给父元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// e.stopPropagation() //阻止冒泡</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>事件代理</strong></p>\n<p>代码简洁<br>减少浏览器内存占用<br>但是，不要滥用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = event.<span class=\"property\">target</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(target.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;A&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(target.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>编写一个通用的<strong>事件监听函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function bindEvent(ele, type, fn)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ele.addEventListener(type,fn)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">ele, type, selector, fn</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">        fn = selector</span><br><span class=\"line\">        selector = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ele.<span class=\"title function_\">addEventListener</span>(type,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> target = e.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(selector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.<span class=\"title function_\">matches</span>(selector))&#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target, e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通绑定</span></span><br><span class=\"line\"><span class=\"title function_\">bindEvent</span>(btn, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//代理绑定</span></span><br><span class=\"line\"><span class=\"title function_\">bindEvent</span>(div, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>描述事件冒泡的流程</p>\n<p>基于DOM树形结构<br>事件会顺着触发元素往上冒泡<br>应用场景：代理</p>\n<p>无限下拉的图片列表，如何监听每个图片的点击？</p>\n<p>事件代理<br>用 e.target获取触发元素<br>用matches来判断是否是触发元素</p>\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><p>XMLHttpRequest</p>\n<p>xhr.readyState<br>0-UNSET尚未调用open方法<br>1-OPENED open方法已被调用<br>2-HEADERS_RECEIVED send方法已被调用，header已被接收<br>3-LOADING 下载中，responseText已有部分内容<br>4-DONE 下载完成</p>\n<p>状态码</p>\n<p>xhr.status<br>·2xx - 表示成功处理请求，如200<br>·3xx - 需要重定向，浏览器直接跳转，如301 302 304<br>·4xx - 客户端请求错误，如404 403<br>·5xx - 服务器端错误</p>\n<p>手写一个简易的 ajax</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">url: string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;404NotFound&#x27;</span>))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跨域：同源策略，跨域解决方案</p>\n<p>什么是跨域（同源策略）</p>\n<p>ajax请求时，浏览器要求当前网页和server必须同源（安全）<br>同源：<strong>协议、域名、端口，三者必须一致</strong><br>前端：<a href=\"http://a.com:8080/\">http://a.com:8080/</a>  server:<a href=\"https://b.com/api/xxx\">https://b.com/api/xxx</a></p>\n<p>**&lt;img&#x2F;&gt;**可用于统计打点，可使用第三方统计服务<br>**&lt;link&#x2F;&gt;&lt;script&gt;**可使用CDN,CDN一般都是外域<br>**&lt;script&gt;**可实现JSONP</p>\n<p>所有的跨域，都必须经过 server 端允许和配合<br>未经server端允许就实现跨域，说明浏览器有漏洞，危险信号</p>\n<p><strong>JSONP</strong></p>\n<p>服务器可以返回任何内容<strong>&lt;script&gt;可绕过跨域限制</strong><br><strong>服务器</strong>可以任意<strong>动态拼接数据返回</strong><br>所以，&lt;script&gt;就可以获得跨域的数据，只要服务端愿意返回</p>\n<p><strong>CORS</strong>(服务端支持)</p>\n<p>常见方式：</p>\n<ol>\n<li>jsop<br>html中的script src属性获取其他源的数据<br>&lt;script&gt;<br>function getData(res){<br>console.Log(res)<br>&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;”<a href=\"http://www.baidu.com/news?callback=getData%22%3E\">http://www.baidu.com/news?callback=getData&quot;&gt;</a></li>\n</ol>\n<p>2.cors跨域资源共享支持所有的主流浏览器ie9+<br>XMLHttpRequest发送请求的时候，如果不同源，heaters{Origin}<br>后台处理：Access-control-allow-origin:</p>\n<p>3.h5 window.postMessage跨域 主流浏览器 ie8+<br>window.postMessage(“字符串”,”*”)</p>\n<p>注意：vue中跨域：:代理proxy··本质上·cors跨域<br>vue.config.js.<br>proxy:{<br>target:<br>changeorigin:<br>pathRewrite:</p>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p><strong>cookie</strong></p>\n<p>本身用于浏览器和 server 通讯<br>被“借用”到本地存储来<br>可用 document.cookie &#x3D; … 来修改</p>\n<p>cookie 的<strong>缺点</strong></p>\n<p>存储大小，最大<strong>4KB</strong><br>http请求时<strong>需要发送到服务端</strong>，增加请求数据量<br>只能用 document.cookie &#x3D; …来修改，太过简陋</p>\n<p><strong>localStorage 和 sessionStorage</strong></p>\n<p>HTML5专门为存储而设计，最大可存<strong>5M</strong><br>API简单易用 <strong>setItem getItem</strong><br>不会随着http请求被发送出去</p>\n<p>localStorage 数据会<strong>永久存储</strong>，除非代码或手动删除<br>sessionStorage 数据只存在于<strong>当前会话</strong>，浏览器关闭则清空<br>一般用localStorage会更多一些</p>\n<p>描述cookie localStorage sessionStorage 区别</p>\n<p>容量<br>API易用性<br>是否跟随http请求发送出去</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>前端工程师开发界面<br>需要调用后端的接口，提交&#x2F;获取数据——http协议<br>要求事先掌握好ajax</p>\n<h3 id=\"http-状态码\"><a href=\"#http-状态码\" class=\"headerlink\" title=\"http 状态码\"></a>http 状态码</h3><p><strong>状态码分类</strong></p>\n<p>1xx服务器收到请求<br>2xx请求成功，如200<br>3xx重定向，如302<br>4xx客户端错误，如404<br>5xx服务端错误，如500</p>\n<p><strong>常见状态码</strong></p>\n<p>200成功<br>201请求成功并创建新资源  POST&#x2F;PUT 请求<br>204满足请求 不需要刷新表单或页面 表单或者删除<br>301永久重定向（配合location,浏览器自动处理<br>302临时重定向（配合location,浏览器自动处理）<br>304资源未被修改 浏览器缓存<br>400服务器由于客户端错误而无法理解和处理请求<br>401当需要身份验证但失败或未提供身份验证<br>403没有权限<br>404资源未找到<br>409同时更新或版本相互冲突<br>410请求的资源不再可用<br>500服务端错误<br>504网关超时</p>\n<p>关于协议和规范</p>\n<p>就是一个约定<br>要求大家都跟着执行<br>不要违反规范，例如IE浏览器</p>\n<h3 id=\"http-methods\"><a href=\"#http-methods\" class=\"headerlink\" title=\"http methods\"></a>http methods</h3><p>传统的methods</p>\n<p>get获取服务器的数据<br>post像服务器提交数据<br>简单的网页功能，就这两个操作</p>\n<p>现在的methods</p>\n<p>get 获取数据<br>post 新建数据<br>patch&#x2F;put更新数据<br>delete删除数据</p>\n<p><strong>Restful API</strong></p>\n<p>一种新的API设计方法（早已推广使用）<br>传统API设计：把每个url当做一个<strong>功能</strong><br>Restful API设计：把每个url当做一个<strong>唯一的资源</strong></p>\n<p>如何设计成一个资源？</p>\n<p>不用url参数</p>\n<p>传统API设计：&#x2F;api&#x2F;list?pageIndex&#x3D;2<br>Restful API设计：&#x2F;api&#x2F;list&#x2F;2</p>\n<p>用<strong>method</strong>表示<strong>操作类型</strong></p>\n<p>传统API设计</p>\n<p>post请求&#x2F;api&#x2F;create-blog<br>post请求&#x2F;api&#x2F;update-blog?id&#x3D;100<br>get请求&#x2F;api&#x2F;get-blog?id&#x3D;100</p>\n<p>Restful API设计</p>\n<p>post请求&#x2F;api&#x2F;blog<br>patch 请求 &#x2F;api&#x2F;blog&#x2F;100<br>get 请求 &#x2F;api&#x2F;blog&#x2F;100</p>\n<p><strong>http headers</strong><br>常见的 <strong>Request</strong> Headers</p>\n<p>Accept 浏览器可接收的数据格式<br>Accept-Encoding浏览器可接收的压缩算法，如gzip<br>Accept-Languange 浏览器可接收的语言，如 zh-CN<br>Connection:keep-alive一次TCP连接重复使用<br>cookie<br>Host<br>User-Agent(简称UA)浏览器信息<br>Content-type 发送数据的格式，如 application&#x2F;json</p>\n<p>常见的 <strong>Response</strong> Headers</p>\n<p>Content-type 返回数据的格式，如 application&#x2F;json<br>Content-length 返回数据的大小，多少字节<br>Content-Encoding 返回数据的压缩算法，如 gzip<br>Set-Cookie</p>\n<p><strong>缓存</strong>相关的headers</p>\n<p>Cache-Control Expires<br>Last-Modified If-Modified-Since<br>If-None-Match<br>Etag</p>\n<h3 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p>什么是缓存？<br>为什么需要缓存？<br>哪些资源可以被缓存？一静态资源（js css img)</p>\n<h4 id=\"强缓存与协商缓存\"><a href=\"#强缓存与协商缓存\" class=\"headerlink\" title=\"强缓存与协商缓存\"></a>强缓存与协商缓存</h4><p><strong>强缓存</strong>：</p>\n<p>​\t\t如果没有过期，浏览器可以直接使用该缓存而不需要重新向服务器请求</p>\n<p>​\t\tExpires 存在于响应头，为缓存过期时间点</p>\n<p>​\t\tCache-Control 存在于响应头和请求头，为缓存过期时常</p>\n<p><strong>Cache-Control</strong></p>\n<p>Response Headers 中<br>控制强制缓存的逻辑<br>例如 Cache-Control:max-age&#x3D;31536000(单位是秒）</p>\n<p><strong>max-age</strong> 过期时长<br><strong>no-cache</strong> 不用强制缓存<br>no-store 不用任何缓存</p>\n<p>private 只允许最终用户缓存<br>public 允许路由&#x2F;代理缓存</p>\n<p>Expires</p>\n<p>同在 Response Headers 中<br>同为控制缓存过期<br>已被 Cache-Control 代替</p>\n<p><strong>协商缓存</strong>：</p>\n<p>​\t\t不能直接使用该缓存，始终向服务器询问是否需要更新</p>\n<p>服务器端缓存策略<br>服务器判断客户端资源，是否和服务端资源一样<br>一致则返回304,否则返回200和最新的资源</p>\n<p>在Response Headers中，有两种</p>\n<p><strong>Last-Modified</strong> 资源的最后修改时间<br><strong>Etag</strong> 资源的唯一标识（一个字符串，类似人类的指纹）</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>HTTP&#x2F;0.9</p>\n<ul>\n<li>只有一个命令GET</li>\n<li>响应类型: 仅超文本</li>\n<li>没有header等描述数据的信息</li>\n<li>服务器发送完毕，就关闭TCP连接</li>\n</ul>\n<p>HTTP&#x2F;1.0</p>\n<ul>\n<li>增加了很多命令（post HESD ）</li>\n<li>增加<code>status code</code> 和 <code>header</code></li>\n<li>多字符集支持、多部分发送、权限、缓存等</li>\n<li>响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)</li>\n</ul>\n<p>HTTP&#x2F;1.1</p>\n<ul>\n<li>持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）</li>\n<li>支持的方法: <code>GET</code> , <code>HEAD</code> , <code>POST</code> , <code>PUT</code> ,<code>DELETE</code> , <code>TRACE</code> , <code>OPTIONS</code></li>\n<li>进行了重大的性能优化和特性增强，分块传输、压缩&#x2F;解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽</li>\n</ul>\n<p>HTTP2</p>\n<ul>\n<li>所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮</li>\n<li>同一个连接里面发送多个请求不再需要按照顺序来</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<p>HTTP3</p>\n<ul>\n<li>QUIC“快速UDP互联网连接”（Quick UDP Internet Connections）</li>\n</ul>\n<p>HTTP3 的主要改进在传输层上。传输层不会再有我前面提到的那些繁重的 TCP 连接了。现在，一切都会走 UDP。</p>\n<h3 id=\"HSTS\"><a href=\"#HSTS\" class=\"headerlink\" title=\"HSTS\"></a>HSTS</h3><p>HTTP Strict Transport Security，简单说就是强制客户端使用 HTTPS 访问页面</p>\n<p>原理：</p>\n<ul>\n<li>在服务器响应头中添加 <code>Strict-Transport-Security</code>，可以设置 <code>max-age</code></li>\n<li>用户访问时，服务器种下这个头</li>\n<li>下次如果使用 http 访问，只要 max-age 未过期，客户端会进行内部跳转，可以看到 307 Redirect Internel 的响应码</li>\n<li>变成 https 访问源服务器</li>\n</ul>\n<h3 id=\"HTTP协议特点\"><a href=\"#HTTP协议特点\" class=\"headerlink\" title=\"HTTP协议特点\"></a>HTTP协议特点</h3><ol>\n<li>支持客户&#x2F;服务器模式。</li>\n<li>简单快速客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>\n</ol>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP&#x2F;IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层</p>\n<h4 id=\"连接三次握手\"><a href=\"#连接三次握手\" class=\"headerlink\" title=\"连接三次握手\"></a>连接三次握手</h4><p>第一次握手：主机A发送位码为<code>SYN＝1</code>，随机产生<code>Seq  number=1234567</code>的数据包到服务器，主机B由<code>SYN=1</code>知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p>\n<p>第二次握手：主机B收到请求后要确认联机信息，向A发送<code>ack number=(主机A的seq+1)</code>，<code>SUN=1，ACK=1234567 + 1</code>，随机产生<code>Seq=7654321</code>的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p>\n<p>第三次握手：主机A收到后检查<code>ack number</code>是否正确，即第一次发送的<code>seq number+1</code>，以及位码<code>SYN</code>是否为1，若正确，主机A会再发送<code>ack number=(主机B的seq+1)</code>，<code>ack=7654321 + 1</code>，主机B收到后确认<code>Seq</code>值与<code>ACK=7654321+ 1</code>则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p>\n<h4 id=\"断开四次分手\"><a href=\"#断开四次分手\" class=\"headerlink\" title=\"断开四次分手\"></a>断开四次分手</h4><p>刚开始双方都处于established状态，假如是客户端先发起关闭请求</p>\n<p>第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态</p>\n<p>第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态</p>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送FIN报文，且指定一个序列号。此时服务端处于LAST_ACK的状态</p>\n<p>需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态，服务端收到ACK报文之后，就处于关闭连接了，处于CLOSED状态。</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>git</p>\n<p>常用git命令</p>\n<p>git add .    添加<br>git checkout xxx     还原<br>git commit - m “ xxx “    提交<br>git push origin master    推送<br>git pull origin master    拉去<br>git branch    分支<br>git checkout -b xxx  新建分支 &#x2F; git checkout XXX    切换分支<br>git merge xxx    合并分支<br>git stash   暂存   git stash pop   恢复暂存</p>\n<p>抓包</p>\n<p>移动端h5页，查看网络请求，需要用工具抓包<br>windows 一般用 fiddler<br>Mac OS 一般用 charles</p>\n<p>webpack babel</p>\n<p>ES6模块化，浏览器暂不支持<br>ES6语法，浏览器并不完全支持<br>压缩代码，整合代码，以让网页加载更快</p>\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>运行环境即浏览器（server端有nodejs)<br>下载网页代码，渲染出页面，期间会执行若干JS<br>要保证代码在浏览器中：稳定且高效</p>\n<h3 id=\"网页加载过程\"><a href=\"#网页加载过程\" class=\"headerlink\" title=\"网页加载过程\"></a>网页加载过程</h3><p>加载资源的<strong>形式</strong></p>\n<p>html代码<br>媒体文件，如图片、视频等<br>javascript css</p>\n<p><strong>加载过程</strong></p>\n<p>DNS解析：域名-&gt;IP地址<br>浏览器根据IP地址向服务器发起http请求<br>服务器处理http请求，并返回给浏览器</p>\n<p><strong>渲染</strong>过程</p>\n<p>根据HTML代码生成DOM Tree<br>根据CSS代码生成CSSOM<br>将DOM Tree和CSSOM整合行程Render Tree<br>根据Render Tree 渲染页面<br>遇到&lt;script&gt;则暂停渲染，优先加载并执行JS代码，完成再继续<br>直至把 Render Tree 渲染完成</p>\n<h4 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h4><p>HTML生成<strong>DOM</strong>树，CSS生成<strong>对象模型</strong>(<strong>CSSDOM</strong>)</p>\n<p>DOM树与CSSDOM合并生成<strong>渲染树</strong></p>\n<p>浏览器根据渲染树计算后生成<strong>布局树</strong>Layout Tree</p>\n<p>最后将画面绘制到屏幕上</p>\n<p><strong>window.onload 和 DOMContentLoaded 区别</strong></p>\n<p>window.onload资源全部加载完才能执行，包括图片<br>DOMContentLoaded DOM 渲染完成即可，图片可能尚未下载</p>\n<h4 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><p>是一个综合性问题，没有标准答案，但要求尽量全面<br>某些细节问题可能会单独提问：手写防抖、节流</p>\n<p><strong>性能优化原则</strong></p>\n<p>多使用内存、缓存或其他方法<br>减少CPU计算量，减少网络加载耗时<br>(适用于所有编程的性能优化——空间换时间）</p>\n<p><strong>让加载更快</strong><br>减少资源体积：压缩代码<br>减少访问次数：合并代码，SSR服务器端渲染，缓存<br>使用更快的网络：CDN</p>\n<p><strong>缓存</strong><br>静态资源加 hash 后缀，根据文件内容计算 hash<br>文件内容不变，则hash不变，则url不变<br>url和文件不变，则会自动触发http缓存机制，返回304</p>\n<p><strong>SSR</strong><br>服务器端渲染：将网页和数据一起加载，一起渲染<br>非SSR(前后端分离）:先加载网页，再加载数据，再渲染数据<br>早先的JSP ASP PHP,现在的vue React SSR</p>\n<p><strong>让渲染更快</strong><br>CSS 放在 head ,JS 放在 body 最下面<br>尽早开始执行JS,用DOMContentLoaded触发<br>懒加载（图片懒加载，上滑加载更多）<br>对DOM查询进行缓存<br>频繁DOM操作，合并到一起插入DOM结构<br><strong>节流 throttle</strong> <strong>防抖 debounce</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>防抖 debounce</strong></p>\n<p>监听一个输入框的，文字变化后触发change事件<br>直接用keyup事件，则会频发触发change事件<br>防抖：用户输入结束或暂停时，才会触发change事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = (<span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span>, <span class=\"attr\">delay</span>: number = <span class=\"number\">500</span>): <span class=\"function\"><span class=\"params\">EventListener</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">timer</span>: <span class=\"title class_\">NodeJS</span>.<span class=\"property\">Timeout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>节流 throttle</strong></p>\n<p>拖拽一个元素时，要随时拿到该元素被拖拽的位置<br>直接用drag事件，则会频发触发，很容易导致卡顿<br>节流：无论拖拽速度多快，都会每隔100ms触发一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = (<span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span>, <span class=\"attr\">delay</span>: number = <span class=\"number\">100</span>): <span class=\"function\"><span class=\"params\">EventListener</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">timer</span>: <span class=\"title class_\">NodeJS</span>.<span class=\"property\">Timeout</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"title function_\">throttle</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\">e: any</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><p>协议:&#x2F;&#x2F;主(ex.com)机:端口&#x2F;路(a&#x2F;b)径 ?查询(k&#x3D;v&amp;k&#x3D;v)参数#锚点</p>\n<h4 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h4><p>从域名获取IP地址</p>\n<p>根域名服务器，顶级域名服务器，主域名服务器</p>\n<p>递归查询</p>\n<p>​\t\t客户端只发一次请求，要求对方给出最终结果。</p>\n<p>​\t\t浏览器缓存，系统缓存，路由器缓存，ISP(运营商)DNS缓存：统称为DNS高速缓存</p>\n<p>​\t\t若当前DNS服务器没有，则服务器会继续向其他DNS服务器查询</p>\n<p>迭代查询</p>\n<p>​\t\t客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表，客户端会再向返回的列表中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。</p>\n<p>​\t\t当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p><strong>XSS跨站请求攻击</strong></p>\n<p>一个博客网站，我发表一篇博客，其中嵌入&lt;script&gt;脚本<br>脚本内容：获取cookie,发送到我的服务器（服务器配合跨域）<br>发布这篇博客，有人查看它，窃取访问者的cookie</p>\n<p><strong>XSS 预防</strong>(xss 工具)</p>\n<p>替换特殊字符，如&lt;变为&lt;&gt;变为&gt;<br>&lt;script&gt;变为 &amp;lt;script&amp;gt;,直接显示，而不会作为脚本执行<br>前端要替换，后端也要替换，都做总不会有错</p>\n<p><strong>XSRF跨站请求伪造</strong></p>\n<p>你正在购物，看中了某个商品，商品id是100<br>付费接口是xxx.com&#x2F;pay?id&#x3D;100,但没有任何验证<br>我是攻击者，我看中了一个商品，id是200<br>我向你发送一封电子邮件，邮件标题很吸引人<br>但邮件正文隐藏着&lt;img src&#x3D;xxx.com&#x2F;pay?id&#x3D;200&#x2F;&gt;<br>你一查看邮件，就帮我购买了id是200的商品</p>\n<p><strong>XSRF 预防</strong></p>\n<p>使用post接口<br>增加验证，例如密码、短信验证码、指纹等</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>之前准备面试做的笔记，从三件套到浏览器，应该算是比较全面的基础前端<del>八股文</del>知识整理</strong></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h4 id=\"HTML-语义化\"><a href=\"#HTML-语义化\" class=\"headerlink\" title=\"HTML 语义化\"></a>HTML 语义化</h4><p>使用语义化标签而不是div, span</p>\n<p>作用:</p>\n<p>​\t\t1.使人更易理解</p>\n<p>​\t\t2.SEO 使机器(搜索引擎 爬虫)能够理解</p>\n<h4 id=\"行级块级元素（块状，内联）\"><a href=\"#行级块级元素（块状，内联）\" class=\"headerlink\" title=\"行级块级元素（块状，内联）\"></a>行级块级元素（块状，内联）</h4><p>display:block&#x2F;table</p>\n<p>​\t\t有div h1 h2 table ul ol p等<br>display: inline&#x2F;inline-block</p>\n<p>​\t\t有 span img input button等</p>\n<h4 id=\"script-标签中-defer-和-async\"><a href=\"#script-标签中-defer-和-async\" class=\"headerlink\" title=\"script 标签中 defer 和 async\"></a>script 标签中 defer 和 async</h4><p>普通的sript：阻止HTML解析，下载并加载完后才会继续解析HTML</p>\n<p>defer：异步下载，同步加载（HTML加载完后才会加载）</p>\n<p>async：异步下载和加载，可能会阻碍HTML解析</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h4 id=\"盒模型宽度计算\"><a href=\"#盒模型宽度计算\" class=\"headerlink\" title=\"盒模型宽度计算\"></a>盒模型宽度计算</h4><p>width+padding*2+boder*2</p>\n<p>使宽度计算方式包括内边距和边框:box-sizing: border-box;</p>\n<h4 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h4><h5 id=\"重叠\"><a href=\"#重叠\" class=\"headerlink\" title=\"重叠\"></a>重叠</h5><p>相邻元素的margin-top和margin-bottom会重叠</p>\n<p>空白内容也会发生重叠</p>\n<h5 id=\"负值\"><a href=\"#负值\" class=\"headerlink\" title=\"负值\"></a>负值</h5><p>margin-top和margin-left负值，元素向上、向左移动<br>margin-right和margin-bottom负值，右侧元素左移，下方元素上移，<strong>自身不受影响</strong></p>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><p>Block format context ,块级格式化上下文</p>\n<p>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</p>\n<p>形成BFC的常见条件<br>        float不是none<br>        position 是 absolute 或 fixed<br>        overflow不是visible<br>        display 是 flex inline-block等</p>\n<h4 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h4><h5 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h5><p>（左侧固定 + 右侧自适应布局）</p>\n<p>现在有以下 DOM 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>左侧<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>右侧<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用浮动，左边元素宽度固定 ，设置向左浮动。将右边元素的 <code>margin-left</code> 设为固定宽度 。注意，因为右边元素的 <code>width</code> 默认为 <code>auto</code> ，所以会自动撑满父元素。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 <code>overflow: hidden;</code> 这样右边就触发了 <code>BFC</code> ，<code>BFC</code> 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用 <code>flex</code> 布局，左边元素固定宽度，右边的元素设置 <code>flex: 1</code> 。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用绝对定位，父级元素设为相对定位。左边元素 <code>absolute</code> 定位，宽度固定。右边元素的 <code>margin-left</code> 的值设为左边元素的宽度值。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用绝对定位，父级元素设为相对定位。左边元素宽度固定，右边元素 <code>absolute</code> 定位， <code>left</code> 为宽度大小，其余方向定位为 <code>0</code> 。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h5><p><strong>圣杯</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: rgb(233, 233, 233);&quot;</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">container</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: rgb(233, 233, 233);&quot;</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bisque;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: -<span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双飞翼</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">        main</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    left</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">    right</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: greenyellow;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>clear fix:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">\tcontent: &#x27;&#x27; ;</span><br><span class=\"line\">\tdisplay:table;</span><br><span class=\"line\">\tclear:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">\t*zoom:1;/*兼容IE低版本*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><p>flex-direction 主轴方向</p>\n<p>justify-content 主轴对齐方式</p>\n<p>align-items 交叉轴对齐方式</p>\n<p>flex-wrap 换行</p>\n<p>align-self 子元素交叉轴对齐</p>\n<p><strong>画个色子</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: palevioletred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h4><p><strong>absolute和relative分别依据什么定位？</strong></p>\n<p>relative依据<strong>自身定位</strong></p>\n<p>自身位移并<strong>作为</strong>子元素(如果有)的<strong>定位基准</strong></p>\n<p>absolute依据最近一层的<strong>定位元素</strong>定位</p>\n<p>定位元素<br>    <strong>absolute</strong> relative fixed<br>    body(找不到absolute时)</p>\n<h4 id=\"居中对齐实现方式\"><a href=\"#居中对齐实现方式\" class=\"headerlink\" title=\"居中对齐实现方式\"></a>居中对齐实现方式</h4><p>水平居中<br>    inline元素：text-align:center<br>    block元素：margin:auto<br>    absolute元素：left:50%+<strong>margin-left负值</strong>(必须知道子元素尺寸) -宽度&#x2F;2</p>\n<p>垂直居中<br>    inline元素：line-height的值等于height值<br>    absolute元素：top:50%+margin-top负值<br>    absolute元素：transform(-50%,-50%)</p>\n<p>​\tabsolute元素：top,left,bottom,right&#x3D;0+margin:auto</p>\n<h4 id=\"line-height-继承方式\"><a href=\"#line-height-继承方式\" class=\"headerlink\" title=\"line-height 继承方式:\"></a>line-height 继承方式:</h4><p>具体数值，如30px,则继承该值<br>比例，如2&#x2F;1.5,则继承该比例<br><strong>百分比</strong>，如200%,则继承<strong>计算出来的值</strong></p>\n<h4 id=\"响应式-rem-x2F-vw-x2F-vh\"><a href=\"#响应式-rem-x2F-vw-x2F-vh\" class=\"headerlink\" title=\"响应式(rem&#x2F;vw&#x2F;vh)\"></a>响应式(rem&#x2F;vw&#x2F;vh)</h4><p>px,绝对长度单位，最常用<br>em,相对长度单位，相对于父元素，不常用</p>\n<p>root em rem,相对长度单位，相对于根元素，常用于响应式布局</p>\n<p>vh网页视口高度的1&#x2F;100<br>vw网页视口宽度的1&#x2F;100<br>vmax 取两者最大值；vmin取两者最小值</p>\n<p><strong>响应式布局的常用方案</strong></p>\n<p>media-query,根据不同的屏幕宽度设置根元素 font-size<br>rem,基于根元素的相对单位</p>\n<p><strong>网页视口尺寸</strong></p>\n<p>window.screen.height&#x2F;&#x2F;屏幕高度<br>window.innerHeight&#x2F;&#x2F;网页视口高度<br>document.body.clientHeight&#x2F;&#x2F;body高度</p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"变量类型和计算\"><a href=\"#变量类型和计算\" class=\"headerlink\" title=\"变量类型和计算\"></a>变量类型和计算</h3><p><strong>值类型和引用类型的区别</strong></p>\n<p>引用类型vs值类型</p>\n<p>引用：储存内存地址（对象，数组，函数等）</p>\n<p><strong>typeof 能判断哪些类型</strong></p>\n<p>识别所有值类型<br>识别函数<br>判断是否是引用类型(object)（不可再细分）</p>\n<p><strong>变量计算-类型转换</strong></p>\n<p>字符串拼接: 拼接时有字符串则会转换为字符串 如  a &#x3D; true + ‘wdnmd’    &#x2F;&#x2F;‘truewdnmd’</p>\n<p><strong>何时使用&#x3D;&#x3D;&#x3D;何时使用&#x3D;&#x3D;</strong></p>\n<p>除&#x3D;&#x3D;null，用&#x3D;&#x3D;&#x3D;<br>&#x3D;&#x3D;:  ‘’ &#x3D;&#x3D; false -&gt; true; 0 &#x3D;&#x3D; false -&gt; true; null &#x3D;&#x3D; undifined -&gt; true</p>\n<p>if 语句和逻辑运算 : !!(0&#x2F;NaN&#x2F;‘’&#x2F;null&#x2F;undefined&#x2F;false) 为falsely变量，其他为truly</p>\n<p><strong>深拷贝</strong></p>\n<p>handle\\1-深拷贝.ts</p>\n<h3 id=\"原型原型链\"><a href=\"#原型原型链\" class=\"headerlink\" title=\"原型原型链\"></a>原型原型链</h3><p>class 和继承</p>\n<p>类型判断 instanceof</p>\n<p>原型和原型链</p>\n<p><strong>如何准确判断一个变量是不是数组？</strong></p>\n<p>val instanceof Array &#x2F;&#x2F; true&#x2F;false</p>\n<p>手写一个简易的jQuery,考虑插件和扩展性</p>\n<p>class jQuery {}<br>jQuery.prototype.chajian &#x3D; function(args){}<br>class jjQuery extends jQuery {}</p>\n<p><strong>class 的原型本质，怎么理解？</strong></p>\n<p>每个class都有显示原型prototype<br>每个实例都有隐式原型__proto__<br>实例的__proto__指向对应class的prototype</p>\n<h3 id=\"作用域和闭包\"><a href=\"#作用域和闭包\" class=\"headerlink\" title=\"作用域和闭包\"></a>作用域和闭包</h3><p><strong>作用域和自由变量</strong></p>\n<p>全局作用域<br>函数作用域<br>块级作用域（ES6新增）</p>\n<p>一个变量在当前作用域没有定义，但被使用了<br>向上级作用域，一层一层依次寻找，直至找到为止<br>如果到全局作用域都没找到，则报错xx is not defined</p>\n<p><strong>闭包</strong></p>\n<p>函数中自由变量的查找在函数定义的地方而不是执行的地方<br>在函数定义的时候，如果当前作用域有被引用的变量，则会形成闭包</p>\n<p><strong>this</strong></p>\n<p>取值是在函数执行时确定的，而不是定义时确定的<br>作为对象方法执行作用域为上级对象<br>setTimeout的this指向window<br>箭头函数this的取值始终为上级作用域</p>\n<p><strong>this 的不同应用场景，如何取值？</strong></p>\n<p>当做普通函数被调用: 执行时作用域<br>使用call apply bind: 指定作用域<br>作为对象方法调用: 上级对象<br>在class的方法中调用: 对象本身<br>箭头函数: 上级作用域</p>\n<p>手写 bind 函数</p>\n<p>handle\\2-bind.ts</p>\n<p>实际开发中闭包的应用场景，举例说明</p>\n<p>隐藏数据,只提供api</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p><strong>单线程和异步</strong></p>\n<p>JS是单线程语言，只能同时做一件事儿<br>浏览器和 nodejs 已支持JS启动进程，如Web Worker<br>JS和DOM渲染共用同一个线程，因为JS可修改DOM结构</p>\n<p>应用场景</p>\n<p>网络请求，如ajax图片加载<br>定时任务，如 setTimeout</p>\n<p>callback hell 和 Promise</p>\n<p>同步和异步的区别是什么？</p>\n<p>基于JS是单线程语言<br>异步不会阻塞代码执行<br>同步会阻塞代码执行</p>\n<p>手写用 Promise 加载一张图片</p>\n<p>promise.ts</p>\n<p>前端使用异步的场景有哪些？</p>\n<p>网络请求，如ajax图片加载<br>定时任务，如setTimeout</p>\n<h4 id=\"event-loop-事件循环\"><a href=\"#event-loop-事件循环\" class=\"headerlink\" title=\"event loop 事件循环\"></a>event loop 事件循环</h4><p>JS如何执行？</p>\n<p>从前到后，一行一行执行<br>如果某一行执行报错，则停止下面代码的执行<br>先把同步代码执行完，再执行异步</p>\n<p><strong>event loop</strong></p>\n<p>同步代码，一行一行放在Call Stack执行<br>遇到异步，会先“记录”下，等待时机（定时、网络请求等）<br>时机到了，就移动到 Callback Queue<br>如 Call Stack为空（即同步代码执行完）Event Loop开始工<br>轮询查找 Callback Queue,如有则移动到 Call Stack 执行<br>然后继续轮询查找（永动机一样）</p>\n<p><strong>DOM 事件和 event loop</strong></p>\n<p>JS是单线程的<br>异步（setTimeout,ajax等）使用回调，基于event loop<br>DOM 事件也使用回调，基于 event loop</p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p><strong>三种状态</strong></p>\n<p>pending resolved rejected<br>pending -&gt; resolved 或 pending -&gt; rejected<br>变化不可逆</p>\n<p><strong>状态的表现和变化</strong></p>\n<p>pending状态，不会触发then和catch<br>resolved 状态，会触发后续的 then 回调函数<br>rejected状态，会触发后续的catch回调函数</p>\n<p><strong>then 和 catch 对状态的影响</strong></p>\n<p>then 正常返回 resolved,里面有报错则返回 rejected<br>catch 正常返回 resolved,里面有报错则返回 rejected</p>\n<h4 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h4><p>异步回调 callback hell<br>Promise then catch 链式调用，但也是基于回调函数<br>async&#x2F;await是同步语法，彻底消灭回调函数</p>\n<p><strong>async&#x2F;await和Promise的关系</strong></p>\n<p>执行<strong>async</strong>函数，<strong>返回</strong>的是<strong>Promise对象</strong> (值封装为Promise对象，Promise直接返回)<br>await 相当于 Promise 的 then<br>try…catch 可捕获异常，代替了 Promise 的 catch</p>\n<p><strong>for … of</strong></p>\n<p>for…in(以及forEach for)是常规的同步遍历<br>for…of 常用于异步的遍历</p>\n<h4 id=\"宏任务-macroTask和微任务-microTask\"><a href=\"#宏任务-macroTask和微任务-microTask\" class=\"headerlink\" title=\"宏任务 macroTask和微任务 microTask\"></a>宏任务 macroTask和微任务 microTask</h4><p><strong>什么是宏任务，什么是微任务</strong></p>\n<p>宏任务：setTimeout,setInterval,Ajax,DOM事件<br>微任务：Promise async&#x2F;await<br>微任务执行时机比宏任务要早</p>\n<p><strong>event loop 和 DOM 渲染</strong><br>每次Call Stack清空（即每次轮询结束）,即同步任务执行完<br>都是DOM重新渲染的机会，DOM结构如有改变则重新渲染<br>然后再去触发下一次 Event Loop</p>\n<p><strong>微任务和宏任务的区别</strong></p>\n<p>宏任务：DOM渲染后触发，如setTimeout<br>微任务：DOM渲染前触发，如Promise</p>\n<p>微任务是ES6语法规定的<br>宏任务是由浏览器规定的</p>\n<p>宏任务有哪些？微任务有哪些？微任务触发时机更早<br>微任务、宏任务和DOM渲染的关系<br>微任务、宏任务和DOM渲染，在eventloop的过程</p>\n<h4 id=\"手写promise\"><a href=\"#手写promise\" class=\"headerlink\" title=\"手写promise\"></a>手写promise</h4><p>3-promise.ts</p>\n<h2 id=\"JS-Web-API\"><a href=\"#JS-Web-API\" class=\"headerlink\" title=\"JS Web API\"></a>JS Web API</h2><h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p>DOM 本质</p>\n<p>从HTML解析出来的一棵树</p>\n<p><strong>DOM 节点操作</strong></p>\n<p>获取DOM节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> div1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)<span class=\"comment\">//元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> containerList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;.container&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;p&#x27;</span>)<span class=\"comment\">//集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = pList[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>property</strong>:修改对象属性，不会体现到html结构中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">style</span>.<span class=\"property\">width</span>)<span class=\"comment\">//获取样式</span></span><br><span class=\"line\">p.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"string\">&#x27;100px&#x27;</span><span class=\"comment\">//修改样式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">className</span>)<span class=\"comment\">//获取class</span></span><br><span class=\"line\">p.<span class=\"property\">className</span>=<span class=\"string\">&#x27;p1&#x27;</span><span class=\"comment\">//修改 class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取 nodeName 和 nodeType</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">nodeName</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">nodeType</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>attribute</strong>:修改html属性，会改变html结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;data-name&#x27;</span>,<span class=\"string\">&#x27;imooc&#x27;</span>)</span><br><span class=\"line\">o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;style&#x27;</span>,<span class=\"string\">&#x27;font-size:30px;&#x27;</span>)</span><br><span class=\"line\">p.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-name&#x27;</span>)<span class=\"comment\">//imooc</span></span><br><span class=\"line\">p.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;style&#x27;</span>)<span class=\"comment\">//font-size:30px;</span></span><br></pre></td></tr></table></figure>\n\n<p>两者都有可能引起DOM重新渲染</p>\n<p><strong>DOM 结构操作</strong></p>\n<p>新增&#x2F;插入节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newP = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>)</span><br><span class=\"line\">newP.<span class=\"property\">innerHTML</span>=<span class=\"string\">&#x27;this is newp&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\">div1.<span class=\"title function_\">appendChild</span>(newP)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动节点(已在DOM中的节点appendChild不会复制)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;oldp&#x27;</span>)</span><br><span class=\"line\">div2.<span class=\"title function_\">appendChild</span>(oldp)</span><br></pre></td></tr></table></figure>\n\n<p>获取父元素，子元素列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取父元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = divl. parentNode</span><br><span class=\"line\"><span class=\"comment\">//获取子元素列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> divl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;divl&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = div1.<span class=\"property\">childNodes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> child=<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(div1.<span class=\"property\">childNodes</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(child.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除子元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div1.<span class=\"title function_\">removeChild</span>(child[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>DOM 性能</strong></p>\n<p>DOM操作非常“昂贵”，避免频繁的DOM操作<br>对DOM查询做<strong>缓存</strong><br>将<strong>频繁</strong>操作改为<strong>一次性</strong>操作</p>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><p>navigator</p>\n<p>如何识别浏览器的类型<br>navigator.userAgent</p>\n<p>screen</p>\n<p>screen.width<br>screen.height</p>\n<p>location</p>\n<p>网址：location.href<br>协议：location.protocol<br>域名：location.host<br>协议+ 域名：location.origin<br>路径：location.pathname<br>参数：location.search<br>锚点：location.hash</p>\n<p>history</p>\n<p>后退：history.back<br>前进：history.forward</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p><strong>事件绑定</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = doucument.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">setEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;click&#x27;</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(e.target)//获取触发的元素</span></span><br><span class=\"line\"><span class=\"comment\">// event.preventDefault()//阻止默认行为</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是事件流\"><a href=\"#什么是事件流\" class=\"headerlink\" title=\"什么是事件流\"></a>什么是事件流</h3><p>事件流描述的就是从页面中接收事件的顺序。而早期的IE和Netscape提出了完全相反的事件流概念，IE事件流是事件冒泡，而Netscape的事件流就是事件捕获。</p>\n<p><strong>事件冒泡</strong></p>\n<p>事件会传递给父元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// e.stopPropagation() //阻止冒泡</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>事件代理</strong></p>\n<p>代码简洁<br>减少浏览器内存占用<br>但是，不要滥用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = event.<span class=\"property\">target</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(target.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;A&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(target.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>编写一个通用的<strong>事件监听函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function bindEvent(ele, type, fn)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ele.addEventListener(type,fn)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">ele, type, selector, fn</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">        fn = selector</span><br><span class=\"line\">        selector = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ele.<span class=\"title function_\">addEventListener</span>(type,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> target = e.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(selector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.<span class=\"title function_\">matches</span>(selector))&#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target, e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通绑定</span></span><br><span class=\"line\"><span class=\"title function_\">bindEvent</span>(btn, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//代理绑定</span></span><br><span class=\"line\"><span class=\"title function_\">bindEvent</span>(div, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>描述事件冒泡的流程</p>\n<p>基于DOM树形结构<br>事件会顺着触发元素往上冒泡<br>应用场景：代理</p>\n<p>无限下拉的图片列表，如何监听每个图片的点击？</p>\n<p>事件代理<br>用 e.target获取触发元素<br>用matches来判断是否是触发元素</p>\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><p>XMLHttpRequest</p>\n<p>xhr.readyState<br>0-UNSET尚未调用open方法<br>1-OPENED open方法已被调用<br>2-HEADERS_RECEIVED send方法已被调用，header已被接收<br>3-LOADING 下载中，responseText已有部分内容<br>4-DONE 下载完成</p>\n<p>状态码</p>\n<p>xhr.status<br>·2xx - 表示成功处理请求，如200<br>·3xx - 需要重定向，浏览器直接跳转，如301 302 304<br>·4xx - 客户端请求错误，如404 403<br>·5xx - 服务器端错误</p>\n<p>手写一个简易的 ajax</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">url: string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;404NotFound&#x27;</span>))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跨域：同源策略，跨域解决方案</p>\n<p>什么是跨域（同源策略）</p>\n<p>ajax请求时，浏览器要求当前网页和server必须同源（安全）<br>同源：<strong>协议、域名、端口，三者必须一致</strong><br>前端：<a href=\"http://a.com:8080/\">http://a.com:8080/</a>  server:<a href=\"https://b.com/api/xxx\">https://b.com/api/xxx</a></p>\n<p>**&lt;img&#x2F;&gt;**可用于统计打点，可使用第三方统计服务<br>**&lt;link&#x2F;&gt;&lt;script&gt;**可使用CDN,CDN一般都是外域<br>**&lt;script&gt;**可实现JSONP</p>\n<p>所有的跨域，都必须经过 server 端允许和配合<br>未经server端允许就实现跨域，说明浏览器有漏洞，危险信号</p>\n<p><strong>JSONP</strong></p>\n<p>服务器可以返回任何内容<strong>&lt;script&gt;可绕过跨域限制</strong><br><strong>服务器</strong>可以任意<strong>动态拼接数据返回</strong><br>所以，&lt;script&gt;就可以获得跨域的数据，只要服务端愿意返回</p>\n<p><strong>CORS</strong>(服务端支持)</p>\n<p>常见方式：</p>\n<ol>\n<li>jsop<br>html中的script src属性获取其他源的数据<br>&lt;script&gt;<br>function getData(res){<br>console.Log(res)<br>&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;”<a href=\"http://www.baidu.com/news?callback=getData%22%3E\">http://www.baidu.com/news?callback=getData&quot;&gt;</a></li>\n</ol>\n<p>2.cors跨域资源共享支持所有的主流浏览器ie9+<br>XMLHttpRequest发送请求的时候，如果不同源，heaters{Origin}<br>后台处理：Access-control-allow-origin:</p>\n<p>3.h5 window.postMessage跨域 主流浏览器 ie8+<br>window.postMessage(“字符串”,”*”)</p>\n<p>注意：vue中跨域：:代理proxy··本质上·cors跨域<br>vue.config.js.<br>proxy:{<br>target:<br>changeorigin:<br>pathRewrite:</p>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p><strong>cookie</strong></p>\n<p>本身用于浏览器和 server 通讯<br>被“借用”到本地存储来<br>可用 document.cookie &#x3D; … 来修改</p>\n<p>cookie 的<strong>缺点</strong></p>\n<p>存储大小，最大<strong>4KB</strong><br>http请求时<strong>需要发送到服务端</strong>，增加请求数据量<br>只能用 document.cookie &#x3D; …来修改，太过简陋</p>\n<p><strong>localStorage 和 sessionStorage</strong></p>\n<p>HTML5专门为存储而设计，最大可存<strong>5M</strong><br>API简单易用 <strong>setItem getItem</strong><br>不会随着http请求被发送出去</p>\n<p>localStorage 数据会<strong>永久存储</strong>，除非代码或手动删除<br>sessionStorage 数据只存在于<strong>当前会话</strong>，浏览器关闭则清空<br>一般用localStorage会更多一些</p>\n<p>描述cookie localStorage sessionStorage 区别</p>\n<p>容量<br>API易用性<br>是否跟随http请求发送出去</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>前端工程师开发界面<br>需要调用后端的接口，提交&#x2F;获取数据——http协议<br>要求事先掌握好ajax</p>\n<h3 id=\"http-状态码\"><a href=\"#http-状态码\" class=\"headerlink\" title=\"http 状态码\"></a>http 状态码</h3><p><strong>状态码分类</strong></p>\n<p>1xx服务器收到请求<br>2xx请求成功，如200<br>3xx重定向，如302<br>4xx客户端错误，如404<br>5xx服务端错误，如500</p>\n<p><strong>常见状态码</strong></p>\n<p>200成功<br>201请求成功并创建新资源  POST&#x2F;PUT 请求<br>204满足请求 不需要刷新表单或页面 表单或者删除<br>301永久重定向（配合location,浏览器自动处理<br>302临时重定向（配合location,浏览器自动处理）<br>304资源未被修改 浏览器缓存<br>400服务器由于客户端错误而无法理解和处理请求<br>401当需要身份验证但失败或未提供身份验证<br>403没有权限<br>404资源未找到<br>409同时更新或版本相互冲突<br>410请求的资源不再可用<br>500服务端错误<br>504网关超时</p>\n<p>关于协议和规范</p>\n<p>就是一个约定<br>要求大家都跟着执行<br>不要违反规范，例如IE浏览器</p>\n<h3 id=\"http-methods\"><a href=\"#http-methods\" class=\"headerlink\" title=\"http methods\"></a>http methods</h3><p>传统的methods</p>\n<p>get获取服务器的数据<br>post像服务器提交数据<br>简单的网页功能，就这两个操作</p>\n<p>现在的methods</p>\n<p>get 获取数据<br>post 新建数据<br>patch&#x2F;put更新数据<br>delete删除数据</p>\n<p><strong>Restful API</strong></p>\n<p>一种新的API设计方法（早已推广使用）<br>传统API设计：把每个url当做一个<strong>功能</strong><br>Restful API设计：把每个url当做一个<strong>唯一的资源</strong></p>\n<p>如何设计成一个资源？</p>\n<p>不用url参数</p>\n<p>传统API设计：&#x2F;api&#x2F;list?pageIndex&#x3D;2<br>Restful API设计：&#x2F;api&#x2F;list&#x2F;2</p>\n<p>用<strong>method</strong>表示<strong>操作类型</strong></p>\n<p>传统API设计</p>\n<p>post请求&#x2F;api&#x2F;create-blog<br>post请求&#x2F;api&#x2F;update-blog?id&#x3D;100<br>get请求&#x2F;api&#x2F;get-blog?id&#x3D;100</p>\n<p>Restful API设计</p>\n<p>post请求&#x2F;api&#x2F;blog<br>patch 请求 &#x2F;api&#x2F;blog&#x2F;100<br>get 请求 &#x2F;api&#x2F;blog&#x2F;100</p>\n<p><strong>http headers</strong><br>常见的 <strong>Request</strong> Headers</p>\n<p>Accept 浏览器可接收的数据格式<br>Accept-Encoding浏览器可接收的压缩算法，如gzip<br>Accept-Languange 浏览器可接收的语言，如 zh-CN<br>Connection:keep-alive一次TCP连接重复使用<br>cookie<br>Host<br>User-Agent(简称UA)浏览器信息<br>Content-type 发送数据的格式，如 application&#x2F;json</p>\n<p>常见的 <strong>Response</strong> Headers</p>\n<p>Content-type 返回数据的格式，如 application&#x2F;json<br>Content-length 返回数据的大小，多少字节<br>Content-Encoding 返回数据的压缩算法，如 gzip<br>Set-Cookie</p>\n<p><strong>缓存</strong>相关的headers</p>\n<p>Cache-Control Expires<br>Last-Modified If-Modified-Since<br>If-None-Match<br>Etag</p>\n<h3 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p>什么是缓存？<br>为什么需要缓存？<br>哪些资源可以被缓存？一静态资源（js css img)</p>\n<h4 id=\"强缓存与协商缓存\"><a href=\"#强缓存与协商缓存\" class=\"headerlink\" title=\"强缓存与协商缓存\"></a>强缓存与协商缓存</h4><p><strong>强缓存</strong>：</p>\n<p>​\t\t如果没有过期，浏览器可以直接使用该缓存而不需要重新向服务器请求</p>\n<p>​\t\tExpires 存在于响应头，为缓存过期时间点</p>\n<p>​\t\tCache-Control 存在于响应头和请求头，为缓存过期时常</p>\n<p><strong>Cache-Control</strong></p>\n<p>Response Headers 中<br>控制强制缓存的逻辑<br>例如 Cache-Control:max-age&#x3D;31536000(单位是秒）</p>\n<p><strong>max-age</strong> 过期时长<br><strong>no-cache</strong> 不用强制缓存<br>no-store 不用任何缓存</p>\n<p>private 只允许最终用户缓存<br>public 允许路由&#x2F;代理缓存</p>\n<p>Expires</p>\n<p>同在 Response Headers 中<br>同为控制缓存过期<br>已被 Cache-Control 代替</p>\n<p><strong>协商缓存</strong>：</p>\n<p>​\t\t不能直接使用该缓存，始终向服务器询问是否需要更新</p>\n<p>服务器端缓存策略<br>服务器判断客户端资源，是否和服务端资源一样<br>一致则返回304,否则返回200和最新的资源</p>\n<p>在Response Headers中，有两种</p>\n<p><strong>Last-Modified</strong> 资源的最后修改时间<br><strong>Etag</strong> 资源的唯一标识（一个字符串，类似人类的指纹）</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>HTTP&#x2F;0.9</p>\n<ul>\n<li>只有一个命令GET</li>\n<li>响应类型: 仅超文本</li>\n<li>没有header等描述数据的信息</li>\n<li>服务器发送完毕，就关闭TCP连接</li>\n</ul>\n<p>HTTP&#x2F;1.0</p>\n<ul>\n<li>增加了很多命令（post HESD ）</li>\n<li>增加<code>status code</code> 和 <code>header</code></li>\n<li>多字符集支持、多部分发送、权限、缓存等</li>\n<li>响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)</li>\n</ul>\n<p>HTTP&#x2F;1.1</p>\n<ul>\n<li>持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）</li>\n<li>支持的方法: <code>GET</code> , <code>HEAD</code> , <code>POST</code> , <code>PUT</code> ,<code>DELETE</code> , <code>TRACE</code> , <code>OPTIONS</code></li>\n<li>进行了重大的性能优化和特性增强，分块传输、压缩&#x2F;解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽</li>\n</ul>\n<p>HTTP2</p>\n<ul>\n<li>所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮</li>\n<li>同一个连接里面发送多个请求不再需要按照顺序来</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<p>HTTP3</p>\n<ul>\n<li>QUIC“快速UDP互联网连接”（Quick UDP Internet Connections）</li>\n</ul>\n<p>HTTP3 的主要改进在传输层上。传输层不会再有我前面提到的那些繁重的 TCP 连接了。现在，一切都会走 UDP。</p>\n<h3 id=\"HSTS\"><a href=\"#HSTS\" class=\"headerlink\" title=\"HSTS\"></a>HSTS</h3><p>HTTP Strict Transport Security，简单说就是强制客户端使用 HTTPS 访问页面</p>\n<p>原理：</p>\n<ul>\n<li>在服务器响应头中添加 <code>Strict-Transport-Security</code>，可以设置 <code>max-age</code></li>\n<li>用户访问时，服务器种下这个头</li>\n<li>下次如果使用 http 访问，只要 max-age 未过期，客户端会进行内部跳转，可以看到 307 Redirect Internel 的响应码</li>\n<li>变成 https 访问源服务器</li>\n</ul>\n<h3 id=\"HTTP协议特点\"><a href=\"#HTTP协议特点\" class=\"headerlink\" title=\"HTTP协议特点\"></a>HTTP协议特点</h3><ol>\n<li>支持客户&#x2F;服务器模式。</li>\n<li>简单快速客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li>\n<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>\n</ol>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP&#x2F;IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层</p>\n<h4 id=\"连接三次握手\"><a href=\"#连接三次握手\" class=\"headerlink\" title=\"连接三次握手\"></a>连接三次握手</h4><p>第一次握手：主机A发送位码为<code>SYN＝1</code>，随机产生<code>Seq  number=1234567</code>的数据包到服务器，主机B由<code>SYN=1</code>知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p>\n<p>第二次握手：主机B收到请求后要确认联机信息，向A发送<code>ack number=(主机A的seq+1)</code>，<code>SUN=1，ACK=1234567 + 1</code>，随机产生<code>Seq=7654321</code>的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p>\n<p>第三次握手：主机A收到后检查<code>ack number</code>是否正确，即第一次发送的<code>seq number+1</code>，以及位码<code>SYN</code>是否为1，若正确，主机A会再发送<code>ack number=(主机B的seq+1)</code>，<code>ack=7654321 + 1</code>，主机B收到后确认<code>Seq</code>值与<code>ACK=7654321+ 1</code>则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p>\n<h4 id=\"断开四次分手\"><a href=\"#断开四次分手\" class=\"headerlink\" title=\"断开四次分手\"></a>断开四次分手</h4><p>刚开始双方都处于established状态，假如是客户端先发起关闭请求</p>\n<p>第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态</p>\n<p>第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态</p>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送FIN报文，且指定一个序列号。此时服务端处于LAST_ACK的状态</p>\n<p>需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态，服务端收到ACK报文之后，就处于关闭连接了，处于CLOSED状态。</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>git</p>\n<p>常用git命令</p>\n<p>git add .    添加<br>git checkout xxx     还原<br>git commit - m “ xxx “    提交<br>git push origin master    推送<br>git pull origin master    拉去<br>git branch    分支<br>git checkout -b xxx  新建分支 &#x2F; git checkout XXX    切换分支<br>git merge xxx    合并分支<br>git stash   暂存   git stash pop   恢复暂存</p>\n<p>抓包</p>\n<p>移动端h5页，查看网络请求，需要用工具抓包<br>windows 一般用 fiddler<br>Mac OS 一般用 charles</p>\n<p>webpack babel</p>\n<p>ES6模块化，浏览器暂不支持<br>ES6语法，浏览器并不完全支持<br>压缩代码，整合代码，以让网页加载更快</p>\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>运行环境即浏览器（server端有nodejs)<br>下载网页代码，渲染出页面，期间会执行若干JS<br>要保证代码在浏览器中：稳定且高效</p>\n<h3 id=\"网页加载过程\"><a href=\"#网页加载过程\" class=\"headerlink\" title=\"网页加载过程\"></a>网页加载过程</h3><p>加载资源的<strong>形式</strong></p>\n<p>html代码<br>媒体文件，如图片、视频等<br>javascript css</p>\n<p><strong>加载过程</strong></p>\n<p>DNS解析：域名-&gt;IP地址<br>浏览器根据IP地址向服务器发起http请求<br>服务器处理http请求，并返回给浏览器</p>\n<p><strong>渲染</strong>过程</p>\n<p>根据HTML代码生成DOM Tree<br>根据CSS代码生成CSSOM<br>将DOM Tree和CSSOM整合行程Render Tree<br>根据Render Tree 渲染页面<br>遇到&lt;script&gt;则暂停渲染，优先加载并执行JS代码，完成再继续<br>直至把 Render Tree 渲染完成</p>\n<h4 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h4><p>HTML生成<strong>DOM</strong>树，CSS生成<strong>对象模型</strong>(<strong>CSSDOM</strong>)</p>\n<p>DOM树与CSSDOM合并生成<strong>渲染树</strong></p>\n<p>浏览器根据渲染树计算后生成<strong>布局树</strong>Layout Tree</p>\n<p>最后将画面绘制到屏幕上</p>\n<p><strong>window.onload 和 DOMContentLoaded 区别</strong></p>\n<p>window.onload资源全部加载完才能执行，包括图片<br>DOMContentLoaded DOM 渲染完成即可，图片可能尚未下载</p>\n<h4 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><p>是一个综合性问题，没有标准答案，但要求尽量全面<br>某些细节问题可能会单独提问：手写防抖、节流</p>\n<p><strong>性能优化原则</strong></p>\n<p>多使用内存、缓存或其他方法<br>减少CPU计算量，减少网络加载耗时<br>(适用于所有编程的性能优化——空间换时间）</p>\n<p><strong>让加载更快</strong><br>减少资源体积：压缩代码<br>减少访问次数：合并代码，SSR服务器端渲染，缓存<br>使用更快的网络：CDN</p>\n<p><strong>缓存</strong><br>静态资源加 hash 后缀，根据文件内容计算 hash<br>文件内容不变，则hash不变，则url不变<br>url和文件不变，则会自动触发http缓存机制，返回304</p>\n<p><strong>SSR</strong><br>服务器端渲染：将网页和数据一起加载，一起渲染<br>非SSR(前后端分离）:先加载网页，再加载数据，再渲染数据<br>早先的JSP ASP PHP,现在的vue React SSR</p>\n<p><strong>让渲染更快</strong><br>CSS 放在 head ,JS 放在 body 最下面<br>尽早开始执行JS,用DOMContentLoaded触发<br>懒加载（图片懒加载，上滑加载更多）<br>对DOM查询进行缓存<br>频繁DOM操作，合并到一起插入DOM结构<br><strong>节流 throttle</strong> <strong>防抖 debounce</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>防抖 debounce</strong></p>\n<p>监听一个输入框的，文字变化后触发change事件<br>直接用keyup事件，则会频发触发change事件<br>防抖：用户输入结束或暂停时，才会触发change事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = (<span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span>, <span class=\"attr\">delay</span>: number = <span class=\"number\">500</span>): <span class=\"function\"><span class=\"params\">EventListener</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">timer</span>: <span class=\"title class_\">NodeJS</span>.<span class=\"property\">Timeout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>节流 throttle</strong></p>\n<p>拖拽一个元素时，要随时拿到该元素被拖拽的位置<br>直接用drag事件，则会频发触发，很容易导致卡顿<br>节流：无论拖拽速度多快，都会每隔100ms触发一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = (<span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span>, <span class=\"attr\">delay</span>: number = <span class=\"number\">100</span>): <span class=\"function\"><span class=\"params\">EventListener</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">timer</span>: <span class=\"title class_\">NodeJS</span>.<span class=\"property\">Timeout</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"title function_\">throttle</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\">e: any</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><p>协议:&#x2F;&#x2F;主(ex.com)机:端口&#x2F;路(a&#x2F;b)径 ?查询(k&#x3D;v&amp;k&#x3D;v)参数#锚点</p>\n<h4 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h4><p>从域名获取IP地址</p>\n<p>根域名服务器，顶级域名服务器，主域名服务器</p>\n<p>递归查询</p>\n<p>​\t\t客户端只发一次请求，要求对方给出最终结果。</p>\n<p>​\t\t浏览器缓存，系统缓存，路由器缓存，ISP(运营商)DNS缓存：统称为DNS高速缓存</p>\n<p>​\t\t若当前DNS服务器没有，则服务器会继续向其他DNS服务器查询</p>\n<p>迭代查询</p>\n<p>​\t\t客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表，客户端会再向返回的列表中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。</p>\n<p>​\t\t当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p><strong>XSS跨站请求攻击</strong></p>\n<p>一个博客网站，我发表一篇博客，其中嵌入&lt;script&gt;脚本<br>脚本内容：获取cookie,发送到我的服务器（服务器配合跨域）<br>发布这篇博客，有人查看它，窃取访问者的cookie</p>\n<p><strong>XSS 预防</strong>(xss 工具)</p>\n<p>替换特殊字符，如&lt;变为&lt;&gt;变为&gt;<br>&lt;script&gt;变为 &amp;lt;script&amp;gt;,直接显示，而不会作为脚本执行<br>前端要替换，后端也要替换，都做总不会有错</p>\n<p><strong>XSRF跨站请求伪造</strong></p>\n<p>你正在购物，看中了某个商品，商品id是100<br>付费接口是xxx.com&#x2F;pay?id&#x3D;100,但没有任何验证<br>我是攻击者，我看中了一个商品，id是200<br>我向你发送一封电子邮件，邮件标题很吸引人<br>但邮件正文隐藏着&lt;img src&#x3D;xxx.com&#x2F;pay?id&#x3D;200&#x2F;&gt;<br>你一查看邮件，就帮我购买了id是200的商品</p>\n<p><strong>XSRF 预防</strong></p>\n<p>使用post接口<br>增加验证，例如密码、短信验证码、指纹等</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldmuenbt00019ie699uk741y","tag_id":"cldmuenc000039ie660yh2lnp","_id":"cldmuenc300049ie644eh26xt"}],"Tag":[{"name":"技术","_id":"cldmuenc000039ie660yh2lnp"}]}}